/**
 * iplocation.net API
 * OpenAPI v3 specification and a set of generated API clients for iplocation.net
 *
 * OpenAPI spec version: 1.1.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIDefaultApiOperations.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace OpenAPI
{

FString OpenAPIDefaultApi::RootGetRequest::ComputePath() const
{
	FString Path(TEXT("/"));
	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("ip=")) + ToUrlString(Ip));
	if(Format.IsSet())
	{
		QueryParams.Add(FString(TEXT("format=")) + ToUrlString(Format.GetValue()));
	}
	if(Delimiter.IsSet())
	{
		QueryParams.Add(FString(TEXT("delimiter=")) + ToUrlString(Delimiter.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIDefaultApi::RootGetRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIDefaultApi::RootGetResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Successfully processed the request."));
		break;
	case 400:
		SetResponseString(TEXT("Failed to complete the request."));
		break;
	case 404:
		SetResponseString(TEXT("Command not found."));
		break;
	}
}

bool OpenAPIDefaultApi::RootGetResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

}
