/**
* iplocation.net API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 0.9.0-pre.0
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param ip IPv4 or IPv6 address used to lookup geolocation.
 * @param ipNumber IP number in long integer.
 * @param ipVersion IP version either 4 or 6.
 * @param countryName Full name of the IP country.
 * @param countryCode2 ISO ALPHA-2 Country Code.
 * @param isp Internet Service Provider (ISP) who owns the IP address.
 * @param responseCode Response status code to indicate success or failed completion of the API call.
 * @param responseMessage Response message to indicate success or failed completion of the API call.
 */
object Get200Responses : BaseTable<Get200Response>("__get_200_response") {
    val ip = blob("ip") /* null */ /* IPv4 or IPv6 address used to lookup geolocation. */
    val ipNumber = blob("ip_number") /* null */ /* IP number in long integer. */
    val ipVersion = blob("ip_version") /* null */ /* IP version either 4 or 6. */
    val countryName = blob("country_name") /* null */ /* Full name of the IP country. */
    val countryCode2 = blob("country_code2") /* null */ /* ISO ALPHA-2 Country Code. */
    val isp = blob("isp") /* null */ /* Internet Service Provider (ISP) who owns the IP address. */
    val responseCode = blob("response_code") /* null */ /* Response status code to indicate success or failed completion of the API call. */
    val responseMessage = blob("response_message") /* null */ /* Response message to indicate success or failed completion of the API call. */

    /**
     * Create an entity of type Get200Response from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = Get200Response(
        ip = row[ip]  /* kotlin.Any? */ /* IPv4 or IPv6 address used to lookup geolocation. */,
        ipNumber = row[ipNumber]  /* kotlin.Any? */ /* IP number in long integer. */,
        ipVersion = row[ipVersion]  /* kotlin.Any? */ /* IP version either 4 or 6. */,
        countryName = row[countryName]  /* kotlin.Any? */ /* Full name of the IP country. */,
        countryCode2 = row[countryCode2]  /* kotlin.Any? */ /* ISO ALPHA-2 Country Code. */,
        isp = row[isp]  /* kotlin.Any? */ /* Internet Service Provider (ISP) who owns the IP address. */,
        responseCode = row[responseCode]  /* kotlin.Any? */ /* Response status code to indicate success or failed completion of the API call. */,
        responseMessage = row[responseMessage]  /* kotlin.Any? */ /* Response message to indicate success or failed completion of the API call. */
    )

    /**
    * Assign all the columns from the entity of type Get200Response to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = Get200Response()
    * database.update(Get200Responses, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: Get200Response) {
        this.apply {
            set(Get200Responses.ip, entity.ip)
            set(Get200Responses.ipNumber, entity.ipNumber)
            set(Get200Responses.ipVersion, entity.ipVersion)
            set(Get200Responses.countryName, entity.countryName)
            set(Get200Responses.countryCode2, entity.countryCode2)
            set(Get200Responses.isp, entity.isp)
            set(Get200Responses.responseCode, entity.responseCode)
            set(Get200Responses.responseMessage, entity.responseMessage)
        }
    }

}


