// tslint:disable
/**
 * iplocation.net API
 * OpenAPI v3 specification and a set of generated API clients for iplocation.net
 *
 * The version of the OpenAPI document: 1.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    Get200Response,
    Get200ResponseFromJSON,
    Get200ResponseToJSON,
    Get400Response,
    Get400ResponseFromJSON,
    Get400ResponseToJSON,
} from '../models';

export interface RootGetRequest {
    ip: string;
    format?: string;
    delimiter?: string;
}


/**
 * Retrieve geolocation of an IP address. 
 * Get geolocation of an IP address
 */
function rootGetRaw<T>(requestParameters: RootGetRequest, requestConfig: runtime.TypedQueryConfig<T, Get200Response> = {}): QueryConfig<T> {
    if (requestParameters.ip === null || requestParameters.ip === undefined) {
        throw new runtime.RequiredError('ip','Required parameter requestParameters.ip was null or undefined when calling rootGet.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.ip !== undefined) {
        queryParameters['ip'] = requestParameters.ip;
    }


    if (requestParameters.format !== undefined) {
        queryParameters['format'] = requestParameters.format;
    }


    if (requestParameters.delimiter !== undefined) {
        queryParameters['delimiter'] = requestParameters.delimiter;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(Get200ResponseFromJSON(body), text);
    }

    return config;
}

/**
* Retrieve geolocation of an IP address. 
* Get geolocation of an IP address
*/
export function rootGet<T>(requestParameters: RootGetRequest, requestConfig?: runtime.TypedQueryConfig<T, Get200Response>): QueryConfig<T> {
    return rootGetRaw(requestParameters, requestConfig);
}

