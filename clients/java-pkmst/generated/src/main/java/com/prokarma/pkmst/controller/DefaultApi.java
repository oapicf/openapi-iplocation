/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.prokarma.pkmst.controller;

import com.prokarma.pkmst.model.Get200Response;
import com.prokarma.pkmst.model.Get400Response;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;

import java.util.List;
/**
 * Provides the info about api methods
 * @author pkmst
 *
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaPKMSTServerCodegen", date = "2024-11-02T22:26:02.843268540Z[Etc/UTC]", comments = "Generator version: 7.9.0")
@Api(value = "Default", description = "the Default API")
public interface DefaultApi {

    @ApiOperation(value = "Get geolocation of an IP address", notes = "Retrieve geolocation of an IP address. ", response = Get200Response.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully processed the request.", response = Get200Response.class),
        @ApiResponse(code = 400, message = "Failed to complete the request.", response = Get400Response.class),
        @ApiResponse(code = 404, message = "Command not found.", response = Get400Response.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/",
        produces = { "application/json" }
    )
    ResponseEntity<Get200Response> rootGet(@ApiParam(value = "An IPv4 or IPv6 address that you would like to lookup.", required = true)  @RequestParam(value = "ip", required = true) String ip,@ApiParam(value = "Output format, the following formats are supported: plain xml json jsonp php csv serialized")  @RequestParam(value = "format", required = false) String format,@ApiParam(value = "Delimiter between proxies. Can be used only with format plain. The following types are supported: 1 for \"\\n\", 2 for \"<br>\".")  @RequestParam(value = "delimiter", required = false) String delimiter, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;

}
