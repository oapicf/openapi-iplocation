/*
 * iplocation.net API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Get200Response {
    /// IPv4 or IPv6 address used to lookup geolocation.
    #[serde(rename = "ip", skip_serializing_if = "Option::is_none")]
    pub ip: Option<String>,
    /// IP number in long integer.
    #[serde(rename = "ip_number", skip_serializing_if = "Option::is_none")]
    pub ip_number: Option<models::Int64>,
    /// IP version either 4 or 6.
    #[serde(rename = "ip_version", skip_serializing_if = "Option::is_none")]
    pub ip_version: Option<i32>,
    /// Full name of the IP country.
    #[serde(rename = "country_name", skip_serializing_if = "Option::is_none")]
    pub country_name: Option<String>,
    /// ISO ALPHA-2 Country Code.
    #[serde(rename = "country_code2", skip_serializing_if = "Option::is_none")]
    pub country_code2: Option<String>,
    /// Internet Service Provider (ISP) who owns the IP address.
    #[serde(rename = "isp", skip_serializing_if = "Option::is_none")]
    pub isp: Option<String>,
    /// Response status code to indicate success or failed completion of the API call.
    #[serde(rename = "response_code", skip_serializing_if = "Option::is_none")]
    pub response_code: Option<String>,
    /// Response message to indicate success or failed completion of the API call.
    #[serde(rename = "response_message", skip_serializing_if = "Option::is_none")]
    pub response_message: Option<String>,
}

impl Get200Response {
    pub fn new() -> Get200Response {
        Get200Response {
            ip: None,
            ip_number: None,
            ip_version: None,
            country_name: None,
            country_code2: None,
            isp: None,
            response_code: None,
            response_message: None,
        }
    }
}

