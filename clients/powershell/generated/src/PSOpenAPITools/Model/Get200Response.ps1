#
# iplocation.net API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 0.9.0-pre.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Ip
IPv4 or IPv6 address used to lookup geolocation.
.PARAMETER IpNumber
IP number in long integer.
.PARAMETER IpVersion
IP version either 4 or 6.
.PARAMETER CountryName
Full name of the IP country.
.PARAMETER CountryCode2
ISO ALPHA-2 Country Code.
.PARAMETER Isp
Internet Service Provider (ISP) who owns the IP address.
.PARAMETER ResponseCode
Response status code to indicate success or failed completion of the API call.
.PARAMETER ResponseMessage
Response message to indicate success or failed completion of the API call.
.OUTPUTS

Get200Response<PSCustomObject>
#>

function Initialize-Get200Response {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Ip},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${IpNumber},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${IpVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CountryName},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CountryCode2},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Isp},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResponseCode},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResponseMessage}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Get200Response' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "ip" = ${Ip}
            "ip_number" = ${IpNumber}
            "ip_version" = ${IpVersion}
            "country_name" = ${CountryName}
            "country_code2" = ${CountryCode2}
            "isp" = ${Isp}
            "response_code" = ${ResponseCode}
            "response_message" = ${ResponseMessage}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Get200Response<PSCustomObject>

.DESCRIPTION

Convert from JSON to Get200Response<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Get200Response<PSCustomObject>
#>
function ConvertFrom-JsonToGet200Response {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Get200Response' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Get200Response
        $AllProperties = ("ip", "ip_number", "ip_version", "country_name", "country_code2", "isp", "response_code", "response_message")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ip"))) { #optional property not found
            $Ip = $null
        } else {
            $Ip = $JsonParameters.PSobject.Properties["ip"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ip_number"))) { #optional property not found
            $IpNumber = $null
        } else {
            $IpNumber = $JsonParameters.PSobject.Properties["ip_number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ip_version"))) { #optional property not found
            $IpVersion = $null
        } else {
            $IpVersion = $JsonParameters.PSobject.Properties["ip_version"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "country_name"))) { #optional property not found
            $CountryName = $null
        } else {
            $CountryName = $JsonParameters.PSobject.Properties["country_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "country_code2"))) { #optional property not found
            $CountryCode2 = $null
        } else {
            $CountryCode2 = $JsonParameters.PSobject.Properties["country_code2"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isp"))) { #optional property not found
            $Isp = $null
        } else {
            $Isp = $JsonParameters.PSobject.Properties["isp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "response_code"))) { #optional property not found
            $ResponseCode = $null
        } else {
            $ResponseCode = $JsonParameters.PSobject.Properties["response_code"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "response_message"))) { #optional property not found
            $ResponseMessage = $null
        } else {
            $ResponseMessage = $JsonParameters.PSobject.Properties["response_message"].value
        }

        $PSO = [PSCustomObject]@{
            "ip" = ${Ip}
            "ip_number" = ${IpNumber}
            "ip_version" = ${IpVersion}
            "country_name" = ${CountryName}
            "country_code2" = ${CountryCode2}
            "isp" = ${Isp}
            "response_code" = ${ResponseCode}
            "response_message" = ${ResponseMessage}
        }

        return $PSO
    }

}

