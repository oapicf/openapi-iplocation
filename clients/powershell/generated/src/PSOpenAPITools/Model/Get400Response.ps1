#
# iplocation.net API
# OpenAPI v3 specification and a set of generated API clients for iplocation.net
# Version: 1.0.1-pre.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ResponseCode
Response status code to indicate success or failed completion of the API call.
.PARAMETER ResponseMessage
Response message to indicate success or failed completion of the API call.
.OUTPUTS

Get400Response<PSCustomObject>
#>

function Initialize-Get400Response {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResponseCode},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResponseMessage}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Get400Response' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "response_code" = ${ResponseCode}
            "response_message" = ${ResponseMessage}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Get400Response<PSCustomObject>

.DESCRIPTION

Convert from JSON to Get400Response<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Get400Response<PSCustomObject>
#>
function ConvertFrom-JsonToGet400Response {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Get400Response' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Get400Response
        $AllProperties = ("response_code", "response_message")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "response_code"))) { #optional property not found
            $ResponseCode = $null
        } else {
            $ResponseCode = $JsonParameters.PSobject.Properties["response_code"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "response_message"))) { #optional property not found
            $ResponseMessage = $null
        } else {
            $ResponseMessage = $JsonParameters.PSobject.Properties["response_message"].value
        }

        $PSO = [PSCustomObject]@{
            "response_code" = ${ResponseCode}
            "response_message" = ${ResponseMessage}
        }

        return $PSO
    }

}

