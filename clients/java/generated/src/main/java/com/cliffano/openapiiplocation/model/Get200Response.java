/*
 * iplocation.net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0-pre.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cliffano.openapiiplocation.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.cliffano.openapiiplocation.JSON;

/**
 * Get200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-02T00:24:26.543360Z[Etc/UTC]")
public class Get200Response {
  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private Object ip = null;

  public static final String SERIALIZED_NAME_IP_NUMBER = "ip_number";
  @SerializedName(SERIALIZED_NAME_IP_NUMBER)
  private Object ipNumber = null;

  public static final String SERIALIZED_NAME_IP_VERSION = "ip_version";
  @SerializedName(SERIALIZED_NAME_IP_VERSION)
  private Object ipVersion = null;

  public static final String SERIALIZED_NAME_COUNTRY_NAME = "country_name";
  @SerializedName(SERIALIZED_NAME_COUNTRY_NAME)
  private Object countryName = null;

  public static final String SERIALIZED_NAME_COUNTRY_CODE2 = "country_code2";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE2)
  private Object countryCode2 = null;

  public static final String SERIALIZED_NAME_ISP = "isp";
  @SerializedName(SERIALIZED_NAME_ISP)
  private Object isp = null;

  public static final String SERIALIZED_NAME_RESPONSE_CODE = "response_code";
  @SerializedName(SERIALIZED_NAME_RESPONSE_CODE)
  private Object responseCode = null;

  public static final String SERIALIZED_NAME_RESPONSE_MESSAGE = "response_message";
  @SerializedName(SERIALIZED_NAME_RESPONSE_MESSAGE)
  private Object responseMessage = null;

  public Get200Response() {
  }

  public Get200Response ip(Object ip) {
    
    this.ip = ip;
    return this;
  }

   /**
   * IPv4 or IPv6 address used to lookup geolocation.
   * @return ip
  **/
  @javax.annotation.Nullable

  public Object getIp() {
    return ip;
  }


  public void setIp(Object ip) {
    this.ip = ip;
  }


  public Get200Response ipNumber(Object ipNumber) {
    
    this.ipNumber = ipNumber;
    return this;
  }

   /**
   * IP number in long integer.
   * @return ipNumber
  **/
  @javax.annotation.Nullable

  public Object getIpNumber() {
    return ipNumber;
  }


  public void setIpNumber(Object ipNumber) {
    this.ipNumber = ipNumber;
  }


  public Get200Response ipVersion(Object ipVersion) {
    
    this.ipVersion = ipVersion;
    return this;
  }

   /**
   * IP version either 4 or 6.
   * @return ipVersion
  **/
  @javax.annotation.Nullable

  public Object getIpVersion() {
    return ipVersion;
  }


  public void setIpVersion(Object ipVersion) {
    this.ipVersion = ipVersion;
  }


  public Get200Response countryName(Object countryName) {
    
    this.countryName = countryName;
    return this;
  }

   /**
   * Full name of the IP country.
   * @return countryName
  **/
  @javax.annotation.Nullable

  public Object getCountryName() {
    return countryName;
  }


  public void setCountryName(Object countryName) {
    this.countryName = countryName;
  }


  public Get200Response countryCode2(Object countryCode2) {
    
    this.countryCode2 = countryCode2;
    return this;
  }

   /**
   * ISO ALPHA-2 Country Code.
   * @return countryCode2
  **/
  @javax.annotation.Nullable

  public Object getCountryCode2() {
    return countryCode2;
  }


  public void setCountryCode2(Object countryCode2) {
    this.countryCode2 = countryCode2;
  }


  public Get200Response isp(Object isp) {
    
    this.isp = isp;
    return this;
  }

   /**
   * Internet Service Provider (ISP) who owns the IP address.
   * @return isp
  **/
  @javax.annotation.Nullable

  public Object getIsp() {
    return isp;
  }


  public void setIsp(Object isp) {
    this.isp = isp;
  }


  public Get200Response responseCode(Object responseCode) {
    
    this.responseCode = responseCode;
    return this;
  }

   /**
   * Response status code to indicate success or failed completion of the API call.
   * @return responseCode
  **/
  @javax.annotation.Nullable

  public Object getResponseCode() {
    return responseCode;
  }


  public void setResponseCode(Object responseCode) {
    this.responseCode = responseCode;
  }


  public Get200Response responseMessage(Object responseMessage) {
    
    this.responseMessage = responseMessage;
    return this;
  }

   /**
   * Response message to indicate success or failed completion of the API call.
   * @return responseMessage
  **/
  @javax.annotation.Nullable

  public Object getResponseMessage() {
    return responseMessage;
  }


  public void setResponseMessage(Object responseMessage) {
    this.responseMessage = responseMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Get200Response get200Response = (Get200Response) o;
    return Objects.equals(this.ip, get200Response.ip) &&
        Objects.equals(this.ipNumber, get200Response.ipNumber) &&
        Objects.equals(this.ipVersion, get200Response.ipVersion) &&
        Objects.equals(this.countryName, get200Response.countryName) &&
        Objects.equals(this.countryCode2, get200Response.countryCode2) &&
        Objects.equals(this.isp, get200Response.isp) &&
        Objects.equals(this.responseCode, get200Response.responseCode) &&
        Objects.equals(this.responseMessage, get200Response.responseMessage);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(ip, ipNumber, ipVersion, countryName, countryCode2, isp, responseCode, responseMessage);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Get200Response {\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    ipNumber: ").append(toIndentedString(ipNumber)).append("\n");
    sb.append("    ipVersion: ").append(toIndentedString(ipVersion)).append("\n");
    sb.append("    countryName: ").append(toIndentedString(countryName)).append("\n");
    sb.append("    countryCode2: ").append(toIndentedString(countryCode2)).append("\n");
    sb.append("    isp: ").append(toIndentedString(isp)).append("\n");
    sb.append("    responseCode: ").append(toIndentedString(responseCode)).append("\n");
    sb.append("    responseMessage: ").append(toIndentedString(responseMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ip");
    openapiFields.add("ip_number");
    openapiFields.add("ip_version");
    openapiFields.add("country_name");
    openapiFields.add("country_code2");
    openapiFields.add("isp");
    openapiFields.add("response_code");
    openapiFields.add("response_message");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Get200Response
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Get200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Get200Response is not found in the empty JSON string", Get200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Get200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Get200Response` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Get200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Get200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Get200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Get200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<Get200Response>() {
           @Override
           public void write(JsonWriter out, Get200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Get200Response read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Get200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Get200Response
  * @throws IOException if the JSON string is invalid with respect to Get200Response
  */
  public static Get200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Get200Response.class);
  }

 /**
  * Convert an instance of Get200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

