/*
 * iplocation.net API
 * OpenAPI v3 specification and a set of generated API clients for iplocation.net
 *
 * The version of the OpenAPI document: 0.9.0-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.oapicf.openapiiplocation.api;

import com.github.oapicf.openapiiplocation.ApiCallback;
import com.github.oapicf.openapiiplocation.ApiClient;
import com.github.oapicf.openapiiplocation.ApiException;
import com.github.oapicf.openapiiplocation.ApiResponse;
import com.github.oapicf.openapiiplocation.Configuration;
import com.github.oapicf.openapiiplocation.Pair;
import com.github.oapicf.openapiiplocation.ProgressRequestBody;
import com.github.oapicf.openapiiplocation.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.github.oapicf.openapiiplocation.model.Get200Response;
import com.github.oapicf.openapiiplocation.model.Get400Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for rootGet
     * @param ip An IPv4 or IPv6 address that you would like to lookup. (required)
     * @param format Output format, the following formats are supported: plain xml json jsonp php csv serialized (optional)
     * @param delimiter Delimiter between proxies. Can be used only with format plain. The following types are supported: 1 for \&quot;\\n\&quot;, 2 for \&quot;&lt;br&gt;\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully processed the request. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to complete the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rootGetCall(String ip, String format, String delimiter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ip", ip));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (delimiter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("delimiter", delimiter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rootGetValidateBeforeCall(String ip, String format, String delimiter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ip' is set
        if (ip == null) {
            throw new ApiException("Missing the required parameter 'ip' when calling rootGet(Async)");
        }

        return rootGetCall(ip, format, delimiter, _callback);

    }

    /**
     * Get geolocation of an IP address
     * Retrieve geolocation of an IP address. 
     * @param ip An IPv4 or IPv6 address that you would like to lookup. (required)
     * @param format Output format, the following formats are supported: plain xml json jsonp php csv serialized (optional)
     * @param delimiter Delimiter between proxies. Can be used only with format plain. The following types are supported: 1 for \&quot;\\n\&quot;, 2 for \&quot;&lt;br&gt;\&quot;. (optional)
     * @return Get200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully processed the request. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to complete the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found. </td><td>  -  </td></tr>
     </table>
     */
    public Get200Response rootGet(String ip, String format, String delimiter) throws ApiException {
        ApiResponse<Get200Response> localVarResp = rootGetWithHttpInfo(ip, format, delimiter);
        return localVarResp.getData();
    }

    /**
     * Get geolocation of an IP address
     * Retrieve geolocation of an IP address. 
     * @param ip An IPv4 or IPv6 address that you would like to lookup. (required)
     * @param format Output format, the following formats are supported: plain xml json jsonp php csv serialized (optional)
     * @param delimiter Delimiter between proxies. Can be used only with format plain. The following types are supported: 1 for \&quot;\\n\&quot;, 2 for \&quot;&lt;br&gt;\&quot;. (optional)
     * @return ApiResponse&lt;Get200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully processed the request. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to complete the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Get200Response> rootGetWithHttpInfo(String ip, String format, String delimiter) throws ApiException {
        okhttp3.Call localVarCall = rootGetValidateBeforeCall(ip, format, delimiter, null);
        Type localVarReturnType = new TypeToken<Get200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get geolocation of an IP address (asynchronously)
     * Retrieve geolocation of an IP address. 
     * @param ip An IPv4 or IPv6 address that you would like to lookup. (required)
     * @param format Output format, the following formats are supported: plain xml json jsonp php csv serialized (optional)
     * @param delimiter Delimiter between proxies. Can be used only with format plain. The following types are supported: 1 for \&quot;\\n\&quot;, 2 for \&quot;&lt;br&gt;\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully processed the request. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to complete the request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Command not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rootGetAsync(String ip, String format, String delimiter, final ApiCallback<Get200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = rootGetValidateBeforeCall(ip, format, delimiter, _callback);
        Type localVarReturnType = new TypeToken<Get200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
