/**
 * iplocation.net API
 * OpenAPI v3 specification and a set of generated API clients for iplocation.net
 *
 * The version of the OpenAPI document: 1.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  Get200Response,
} from './models';

/**
 * rootGet - parameters interface
 */
export interface IRootGetParams {
  ip: string;
  format?: string;
  delimiter?: string;
}

/**
 * DefaultApi - API class
 */
@autoinject()
export class DefaultApi extends Api {

  /**
   * Creates a new DefaultApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Get geolocation of an IP address
   * Retrieve geolocation of an IP address. 
   * @param params.ip An IPv4 or IPv6 address that you would like to lookup.
   * @param params.format Output format, the following formats are supported: plain xml json jsonp php csv serialized
   * @param params.delimiter Delimiter between proxies. Can be used only with format plain. The following types are supported: 1 for \&quot;\\n\&quot;, 2 for \&quot;&lt;br&gt;\&quot;.
   */
  async rootGet(params: IRootGetParams): Promise<Get200Response> {
    // Verify required parameters are set
    this.ensureParamIsSet('rootGet', params, 'ip');

    // Create URL to call
    const url = `${this.basePath}/`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'ip': params['ip'],
        'format': params['format'],
        'delimiter': params['delimiter'],
      })

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

