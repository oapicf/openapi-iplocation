/**
 * iplocation.net API
 * OpenAPI v3 specification and a set of generated API clients for iplocation.net
 *
 * The version of the OpenAPI document: 1.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "__get_200_response.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

__get_200_response::__get_200_response(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string __get_200_response::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void __get_200_response::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree __get_200_response::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("ip", m_Ip);
	pt.put("ip_number", m_Ip_number);
	pt.put("ip_version", m_Ip_version);
	pt.put("country_name", m_Country_name);
	pt.put("country_code2", m_Country_code2);
	pt.put("isp", m_Isp);
	pt.put("response_code", m_Response_code);
	pt.put("response_message", m_Response_message);
	return pt;
}

void __get_200_response::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Ip = pt.get("ip", "");
	m_Ip_number = pt.get("ip_number", "");
	m_Ip_version = pt.get("ip_version", 0);
	m_Country_name = pt.get("country_name", "");
	m_Country_code2 = pt.get("country_code2", "");
	m_Isp = pt.get("isp", "");
	m_Response_code = pt.get("response_code", "");
	m_Response_message = pt.get("response_message", "");
}

std::string __get_200_response::getIp() const
{
    return m_Ip;
}

void __get_200_response::setIp(std::string value)
{
    m_Ip = value;
}


std::string __get_200_response::getIpNumber() const
{
    return m_Ip_number;
}

void __get_200_response::setIpNumber(std::string value)
{
    m_Ip_number = value;
}


int32_t __get_200_response::getIpVersion() const
{
    return m_Ip_version;
}

void __get_200_response::setIpVersion(int32_t value)
{
    m_Ip_version = value;
}


std::string __get_200_response::getCountryName() const
{
    return m_Country_name;
}

void __get_200_response::setCountryName(std::string value)
{
    m_Country_name = value;
}


std::string __get_200_response::getCountryCode2() const
{
    return m_Country_code2;
}

void __get_200_response::setCountryCode2(std::string value)
{
    m_Country_code2 = value;
}


std::string __get_200_response::getIsp() const
{
    return m_Isp;
}

void __get_200_response::setIsp(std::string value)
{
    m_Isp = value;
}


std::string __get_200_response::getResponseCode() const
{
    return m_Response_code;
}

void __get_200_response::setResponseCode(std::string value)
{
    m_Response_code = value;
}


std::string __get_200_response::getResponseMessage() const
{
    return m_Response_message;
}

void __get_200_response::setResponseMessage(std::string value)
{
    m_Response_message = value;
}



std::vector<__get_200_response> create__get_200_responseVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<__get_200_response>();
    for (const auto& child: pt) {
        vec.emplace_back(__get_200_response(child.second));
    }

    return vec;
}

}
}
}
}

