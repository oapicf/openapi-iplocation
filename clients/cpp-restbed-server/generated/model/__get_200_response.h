/**
 * iplocation.net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0-pre.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * __get_200_response.h
 *
 * 
 */

#ifndef __get_200_response_H_
#define __get_200_response_H_



#include "AnyType.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  __get_200_response 
{
public:
    __get_200_response() = default;
    explicit __get_200_response(boost::property_tree::ptree const& pt);
    virtual ~__get_200_response() = default;

    __get_200_response(const __get_200_response& other) = default; // copy constructor
    __get_200_response(__get_200_response&& other) noexcept = default; // move constructor

    __get_200_response& operator=(const __get_200_response& other) = default; // copy assignment
    __get_200_response& operator=(__get_200_response&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// __get_200_response members

    /// <summary>
    /// IPv4 or IPv6 address used to lookup geolocation.
    /// </summary>
    AnyType getIp() const;
    void setIp(AnyType value);

    /// <summary>
    /// IP number in long integer.
    /// </summary>
    AnyType getIpNumber() const;
    void setIpNumber(AnyType value);

    /// <summary>
    /// IP version either 4 or 6.
    /// </summary>
    AnyType getIpVersion() const;
    void setIpVersion(AnyType value);

    /// <summary>
    /// Full name of the IP country.
    /// </summary>
    AnyType getCountryName() const;
    void setCountryName(AnyType value);

    /// <summary>
    /// ISO ALPHA-2 Country Code.
    /// </summary>
    AnyType getCountryCode2() const;
    void setCountryCode2(AnyType value);

    /// <summary>
    /// Internet Service Provider (ISP) who owns the IP address.
    /// </summary>
    AnyType getIsp() const;
    void setIsp(AnyType value);

    /// <summary>
    /// Response status code to indicate success or failed completion of the API call.
    /// </summary>
    AnyType getResponseCode() const;
    void setResponseCode(AnyType value);

    /// <summary>
    /// Response message to indicate success or failed completion of the API call.
    /// </summary>
    AnyType getResponseMessage() const;
    void setResponseMessage(AnyType value);

protected:
    AnyType m_Ip = nullptr;
    AnyType m_Ip_number = nullptr;
    AnyType m_Ip_version = nullptr;
    AnyType m_Country_name = nullptr;
    AnyType m_Country_code2 = nullptr;
    AnyType m_Isp = nullptr;
    AnyType m_Response_code = nullptr;
    AnyType m_Response_message = nullptr;
};

std::vector<__get_200_response> create__get_200_responseVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<__get_200_response>(const __get_200_response& val) {
    return val.toPropertyTree();
}

template<>
inline __get_200_response fromPt<__get_200_response>(const boost::property_tree::ptree& pt) {
    __get_200_response ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* __get_200_response_H_ */
