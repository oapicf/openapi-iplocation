/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.DefaultApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 * Version: 0.9.0-pre.0
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.DefaultApi');

goog.require('API.Client.__get_200_response');
goog.require('API.Client.__get_400_response');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.DefaultApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('DefaultApiBasePath') ?
                   /** @type {!string} */ ($injector.get('DefaultApiBasePath')) :
                   'https://api.iplocation.net';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('DefaultApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('DefaultApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.DefaultApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Get geolocation of an IP address
 * Retrieve geolocation of an IP address. 
 * @param {!API.Client.AnyType} ip An IPv4 or IPv6 address that you would like to lookup.
 * @param {!API.Client.AnyType=} opt_format Output format, the following formats are supported: plain xml json jsonp php csv serialized
 * @param {!API.Client.AnyType=} opt_delimiter Delimiter between proxies. Can be used only with format plain. The following types are supported: 1 for \&quot;\\n\&quot;, 2 for \&quot;&lt;br&gt;\&quot;.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.__get_200_response>}
 */
API.Client.DefaultApi.prototype.rootGet = function(ip, opt_format, opt_delimiter, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'ip' is set
  if (!ip) {
    throw new Error('Missing required parameter ip when calling rootGet');
  }
  if (ip !== undefined) {
    queryParameters['ip'] = ip;
  }

  if (opt_format !== undefined) {
    queryParameters['format'] = opt_format;
  }

  if (opt_delimiter !== undefined) {
    queryParameters['delimiter'] = opt_delimiter;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
