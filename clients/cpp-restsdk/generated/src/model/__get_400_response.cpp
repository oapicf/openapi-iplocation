/**
 * iplocation.net API
 * OpenAPI v3 specification and a set of generated API clients for iplocation.net
 *
 * The version of the OpenAPI document: 0.9.0-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/__get_400_response.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



__get_400_response::__get_400_response()
{
    m_Response_code = utility::conversions::to_string_t("");
    m_Response_codeIsSet = false;
    m_Response_message = utility::conversions::to_string_t("");
    m_Response_messageIsSet = false;
}

__get_400_response::~__get_400_response()
{
}

void __get_400_response::validate()
{
    // TODO: implement validation
}

web::json::value __get_400_response::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Response_codeIsSet)
    {
        val[utility::conversions::to_string_t(U("response_code"))] = ModelBase::toJson(m_Response_code);
    }
    if(m_Response_messageIsSet)
    {
        val[utility::conversions::to_string_t(U("response_message"))] = ModelBase::toJson(m_Response_message);
    }

    return val;
}

bool __get_400_response::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("response_code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("response_code")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setResponseCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setResponseCode);
            setResponseCode(refVal_setResponseCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("response_message"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("response_message")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setResponseMessage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setResponseMessage);
            setResponseMessage(refVal_setResponseMessage);
        }
    }
    return ok;
}

void __get_400_response::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Response_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("response_code")), m_Response_code));
    }
    if(m_Response_messageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("response_message")), m_Response_message));
    }
}

bool __get_400_response::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("response_code"))))
    {
        utility::string_t refVal_setResponseCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("response_code"))), refVal_setResponseCode );
        setResponseCode(refVal_setResponseCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("response_message"))))
    {
        utility::string_t refVal_setResponseMessage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("response_message"))), refVal_setResponseMessage );
        setResponseMessage(refVal_setResponseMessage);
    }
    return ok;
}

utility::string_t __get_400_response::getResponseCode() const
{
    return m_Response_code;
}

void __get_400_response::setResponseCode(const utility::string_t& value)
{
    m_Response_code = value;
    m_Response_codeIsSet = true;
}

bool __get_400_response::responseCodeIsSet() const
{
    return m_Response_codeIsSet;
}

void __get_400_response::unsetResponse_code()
{
    m_Response_codeIsSet = false;
}
utility::string_t __get_400_response::getResponseMessage() const
{
    return m_Response_message;
}

void __get_400_response::setResponseMessage(const utility::string_t& value)
{
    m_Response_message = value;
    m_Response_messageIsSet = true;
}

bool __get_400_response::responseMessageIsSet() const
{
    return m_Response_messageIsSet;
}

void __get_400_response::unsetResponse_message()
{
    m_Response_messageIsSet = false;
}
}
}
}
}


