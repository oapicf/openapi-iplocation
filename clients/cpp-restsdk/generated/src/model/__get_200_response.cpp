/**
 * iplocation.net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0-pre.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/__get_200_response.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



__get_200_response::__get_200_response()
{
    m_IpIsSet = false;
    m_Ip_numberIsSet = false;
    m_Ip_versionIsSet = false;
    m_Country_nameIsSet = false;
    m_Country_code2IsSet = false;
    m_IspIsSet = false;
    m_Response_codeIsSet = false;
    m_Response_messageIsSet = false;
}

__get_200_response::~__get_200_response()
{
}

void __get_200_response::validate()
{
    // TODO: implement validation
}

web::json::value __get_200_response::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IpIsSet)
    {
        val[utility::conversions::to_string_t(U("ip"))] = ModelBase::toJson(m_Ip);
    }
    if(m_Ip_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("ip_number"))] = ModelBase::toJson(m_Ip_number);
    }
    if(m_Ip_versionIsSet)
    {
        val[utility::conversions::to_string_t(U("ip_version"))] = ModelBase::toJson(m_Ip_version);
    }
    if(m_Country_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("country_name"))] = ModelBase::toJson(m_Country_name);
    }
    if(m_Country_code2IsSet)
    {
        val[utility::conversions::to_string_t(U("country_code2"))] = ModelBase::toJson(m_Country_code2);
    }
    if(m_IspIsSet)
    {
        val[utility::conversions::to_string_t(U("isp"))] = ModelBase::toJson(m_Isp);
    }
    if(m_Response_codeIsSet)
    {
        val[utility::conversions::to_string_t(U("response_code"))] = ModelBase::toJson(m_Response_code);
    }
    if(m_Response_messageIsSet)
    {
        val[utility::conversions::to_string_t(U("response_message"))] = ModelBase::toJson(m_Response_message);
    }

    return val;
}

bool __get_200_response::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("ip"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ip")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_setIp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIp);
            setIp(refVal_setIp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ip_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ip_number")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_setIpNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIpNumber);
            setIpNumber(refVal_setIpNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ip_version"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ip_version")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_setIpVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIpVersion);
            setIpVersion(refVal_setIpVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("country_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("country_name")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_setCountryName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCountryName);
            setCountryName(refVal_setCountryName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("country_code2"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("country_code2")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_setCountryCode2;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCountryCode2);
            setCountryCode2(refVal_setCountryCode2);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isp")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_setIsp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsp);
            setIsp(refVal_setIsp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("response_code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("response_code")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_setResponseCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setResponseCode);
            setResponseCode(refVal_setResponseCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("response_message"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("response_message")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_setResponseMessage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setResponseMessage);
            setResponseMessage(refVal_setResponseMessage);
        }
    }
    return ok;
}

void __get_200_response::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IpIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ip")), m_Ip));
    }
    if(m_Ip_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ip_number")), m_Ip_number));
    }
    if(m_Ip_versionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ip_version")), m_Ip_version));
    }
    if(m_Country_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("country_name")), m_Country_name));
    }
    if(m_Country_code2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("country_code2")), m_Country_code2));
    }
    if(m_IspIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isp")), m_Isp));
    }
    if(m_Response_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("response_code")), m_Response_code));
    }
    if(m_Response_messageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("response_message")), m_Response_message));
    }
}

bool __get_200_response::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("ip"))))
    {
        std::shared_ptr<AnyType> refVal_setIp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ip"))), refVal_setIp );
        setIp(refVal_setIp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ip_number"))))
    {
        std::shared_ptr<AnyType> refVal_setIpNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ip_number"))), refVal_setIpNumber );
        setIpNumber(refVal_setIpNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ip_version"))))
    {
        std::shared_ptr<AnyType> refVal_setIpVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ip_version"))), refVal_setIpVersion );
        setIpVersion(refVal_setIpVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("country_name"))))
    {
        std::shared_ptr<AnyType> refVal_setCountryName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("country_name"))), refVal_setCountryName );
        setCountryName(refVal_setCountryName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("country_code2"))))
    {
        std::shared_ptr<AnyType> refVal_setCountryCode2;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("country_code2"))), refVal_setCountryCode2 );
        setCountryCode2(refVal_setCountryCode2);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isp"))))
    {
        std::shared_ptr<AnyType> refVal_setIsp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isp"))), refVal_setIsp );
        setIsp(refVal_setIsp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("response_code"))))
    {
        std::shared_ptr<AnyType> refVal_setResponseCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("response_code"))), refVal_setResponseCode );
        setResponseCode(refVal_setResponseCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("response_message"))))
    {
        std::shared_ptr<AnyType> refVal_setResponseMessage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("response_message"))), refVal_setResponseMessage );
        setResponseMessage(refVal_setResponseMessage);
    }
    return ok;
}

std::shared_ptr<AnyType> __get_200_response::getIp() const
{
    return m_Ip;
}

void __get_200_response::setIp(const std::shared_ptr<AnyType>& value)
{
    m_Ip = value;
    m_IpIsSet = true;
}

bool __get_200_response::ipIsSet() const
{
    return m_IpIsSet;
}

void __get_200_response::unsetIp()
{
    m_IpIsSet = false;
}
std::shared_ptr<AnyType> __get_200_response::getIpNumber() const
{
    return m_Ip_number;
}

void __get_200_response::setIpNumber(const std::shared_ptr<AnyType>& value)
{
    m_Ip_number = value;
    m_Ip_numberIsSet = true;
}

bool __get_200_response::ipNumberIsSet() const
{
    return m_Ip_numberIsSet;
}

void __get_200_response::unsetIp_number()
{
    m_Ip_numberIsSet = false;
}
std::shared_ptr<AnyType> __get_200_response::getIpVersion() const
{
    return m_Ip_version;
}

void __get_200_response::setIpVersion(const std::shared_ptr<AnyType>& value)
{
    m_Ip_version = value;
    m_Ip_versionIsSet = true;
}

bool __get_200_response::ipVersionIsSet() const
{
    return m_Ip_versionIsSet;
}

void __get_200_response::unsetIp_version()
{
    m_Ip_versionIsSet = false;
}
std::shared_ptr<AnyType> __get_200_response::getCountryName() const
{
    return m_Country_name;
}

void __get_200_response::setCountryName(const std::shared_ptr<AnyType>& value)
{
    m_Country_name = value;
    m_Country_nameIsSet = true;
}

bool __get_200_response::countryNameIsSet() const
{
    return m_Country_nameIsSet;
}

void __get_200_response::unsetCountry_name()
{
    m_Country_nameIsSet = false;
}
std::shared_ptr<AnyType> __get_200_response::getCountryCode2() const
{
    return m_Country_code2;
}

void __get_200_response::setCountryCode2(const std::shared_ptr<AnyType>& value)
{
    m_Country_code2 = value;
    m_Country_code2IsSet = true;
}

bool __get_200_response::countryCode2IsSet() const
{
    return m_Country_code2IsSet;
}

void __get_200_response::unsetCountry_code2()
{
    m_Country_code2IsSet = false;
}
std::shared_ptr<AnyType> __get_200_response::getIsp() const
{
    return m_Isp;
}

void __get_200_response::setIsp(const std::shared_ptr<AnyType>& value)
{
    m_Isp = value;
    m_IspIsSet = true;
}

bool __get_200_response::ispIsSet() const
{
    return m_IspIsSet;
}

void __get_200_response::unsetIsp()
{
    m_IspIsSet = false;
}
std::shared_ptr<AnyType> __get_200_response::getResponseCode() const
{
    return m_Response_code;
}

void __get_200_response::setResponseCode(const std::shared_ptr<AnyType>& value)
{
    m_Response_code = value;
    m_Response_codeIsSet = true;
}

bool __get_200_response::responseCodeIsSet() const
{
    return m_Response_codeIsSet;
}

void __get_200_response::unsetResponse_code()
{
    m_Response_codeIsSet = false;
}
std::shared_ptr<AnyType> __get_200_response::getResponseMessage() const
{
    return m_Response_message;
}

void __get_200_response::setResponseMessage(const std::shared_ptr<AnyType>& value)
{
    m_Response_message = value;
    m_Response_messageIsSet = true;
}

bool __get_200_response::responseMessageIsSet() const
{
    return m_Response_messageIsSet;
}

void __get_200_response::unsetResponse_message()
{
    m_Response_messageIsSet = false;
}
}
}
}
}


