/**
 * iplocation.net API
 * OpenAPI v3 specification and a set of generated API clients for iplocation.net
 *
 * The version of the OpenAPI document: 1.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * __get_200_response.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL___get_200_response_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL___get_200_response_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// 
/// </summary>
class  __get_200_response
    : public ModelBase
{
public:
    __get_200_response();
    virtual ~__get_200_response();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// __get_200_response members

    /// <summary>
    /// IPv4 or IPv6 address used to lookup geolocation.
    /// </summary>
    utility::string_t getIp() const;
    bool ipIsSet() const;
    void unsetIp();

    void setIp(const utility::string_t& value);

    /// <summary>
    /// IP number in long integer (represented as string).
    /// </summary>
    utility::string_t getIpNumber() const;
    bool ipNumberIsSet() const;
    void unsetIp_number();

    void setIpNumber(const utility::string_t& value);

    /// <summary>
    /// IP version either 4 or 6.
    /// </summary>
    int32_t getIpVersion() const;
    bool ipVersionIsSet() const;
    void unsetIp_version();

    void setIpVersion(int32_t value);

    /// <summary>
    /// Full name of the IP country.
    /// </summary>
    utility::string_t getCountryName() const;
    bool countryNameIsSet() const;
    void unsetCountry_name();

    void setCountryName(const utility::string_t& value);

    /// <summary>
    /// ISO ALPHA-2 Country Code.
    /// </summary>
    utility::string_t getCountryCode2() const;
    bool countryCode2IsSet() const;
    void unsetCountry_code2();

    void setCountryCode2(const utility::string_t& value);

    /// <summary>
    /// Internet Service Provider (ISP) who owns the IP address.
    /// </summary>
    utility::string_t getIsp() const;
    bool ispIsSet() const;
    void unsetIsp();

    void setIsp(const utility::string_t& value);

    /// <summary>
    /// Response status code to indicate success or failed completion of the API call.
    /// </summary>
    utility::string_t getResponseCode() const;
    bool responseCodeIsSet() const;
    void unsetResponse_code();

    void setResponseCode(const utility::string_t& value);

    /// <summary>
    /// Response message to indicate success or failed completion of the API call.
    /// </summary>
    utility::string_t getResponseMessage() const;
    bool responseMessageIsSet() const;
    void unsetResponse_message();

    void setResponseMessage(const utility::string_t& value);


protected:
    utility::string_t m_Ip;
    bool m_IpIsSet;
    utility::string_t m_Ip_number;
    bool m_Ip_numberIsSet;
    int32_t m_Ip_version;
    bool m_Ip_versionIsSet;
    utility::string_t m_Country_name;
    bool m_Country_nameIsSet;
    utility::string_t m_Country_code2;
    bool m_Country_code2IsSet;
    utility::string_t m_Isp;
    bool m_IspIsSet;
    utility::string_t m_Response_code;
    bool m_Response_codeIsSet;
    utility::string_t m_Response_message;
    bool m_Response_messageIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL___get_200_response_H_ */
