/*
 * iplocation.net API
 *
 * OpenAPI v3 specification and a set of generated API clients for iplocation.net
 *
 * The version of the OpenAPI document: 1.1.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Get400Response : IEquatable<Get400Response>
    {
        /// <summary>
        /// Response status code to indicate success or failed completion of the API call.
        /// </summary>
        /// <value>Response status code to indicate success or failed completion of the API call.</value>
        [DataMember(Name="response_code", EmitDefaultValue=false)]
        public string ResponseCode { get; set; }

        /// <summary>
        /// Response message to indicate success or failed completion of the API call.
        /// </summary>
        /// <value>Response message to indicate success or failed completion of the API call.</value>
        [DataMember(Name="response_message", EmitDefaultValue=false)]
        public string ResponseMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Get400Response {\n");
            sb.Append("  ResponseCode: ").Append(ResponseCode).Append("\n");
            sb.Append("  ResponseMessage: ").Append(ResponseMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Get400Response)obj);
        }

        /// <summary>
        /// Returns true if Get400Response instances are equal
        /// </summary>
        /// <param name="other">Instance of Get400Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Get400Response other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ResponseCode == other.ResponseCode ||
                    ResponseCode != null &&
                    ResponseCode.Equals(other.ResponseCode)
                ) && 
                (
                    ResponseMessage == other.ResponseMessage ||
                    ResponseMessage != null &&
                    ResponseMessage.Equals(other.ResponseMessage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ResponseCode != null)
                    hashCode = hashCode * 59 + ResponseCode.GetHashCode();
                    if (ResponseMessage != null)
                    hashCode = hashCode * 59 + ResponseMessage.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Get400Response left, Get400Response right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Get400Response left, Get400Response right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
