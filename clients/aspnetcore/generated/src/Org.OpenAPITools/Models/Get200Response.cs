/*
 * iplocation.net API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Get200Response : IEquatable<Get200Response>
    {
        /// <summary>
        /// IPv4 or IPv6 address used to lookup geolocation.
        /// </summary>
        /// <value>IPv4 or IPv6 address used to lookup geolocation.</value>
        [DataMember(Name="ip", EmitDefaultValue=false)]
        public string Ip { get; set; }

        /// <summary>
        /// IP number in long integer.
        /// </summary>
        /// <value>IP number in long integer.</value>
        [DataMember(Name="ip_number", EmitDefaultValue=false)]
        public Int64 IpNumber { get; set; }

        /// <summary>
        /// IP version either 4 or 6.
        /// </summary>
        /// <value>IP version either 4 or 6.</value>
        [DataMember(Name="ip_version", EmitDefaultValue=true)]
        public int IpVersion { get; set; }

        /// <summary>
        /// Full name of the IP country.
        /// </summary>
        /// <value>Full name of the IP country.</value>
        [DataMember(Name="country_name", EmitDefaultValue=false)]
        public string CountryName { get; set; }

        /// <summary>
        /// ISO ALPHA-2 Country Code.
        /// </summary>
        /// <value>ISO ALPHA-2 Country Code.</value>
        [DataMember(Name="country_code2", EmitDefaultValue=false)]
        public string CountryCode2 { get; set; }

        /// <summary>
        /// Internet Service Provider (ISP) who owns the IP address.
        /// </summary>
        /// <value>Internet Service Provider (ISP) who owns the IP address.</value>
        [DataMember(Name="isp", EmitDefaultValue=false)]
        public string Isp { get; set; }

        /// <summary>
        /// Response status code to indicate success or failed completion of the API call.
        /// </summary>
        /// <value>Response status code to indicate success or failed completion of the API call.</value>
        [DataMember(Name="response_code", EmitDefaultValue=false)]
        public string ResponseCode { get; set; }

        /// <summary>
        /// Response message to indicate success or failed completion of the API call.
        /// </summary>
        /// <value>Response message to indicate success or failed completion of the API call.</value>
        [DataMember(Name="response_message", EmitDefaultValue=false)]
        public string ResponseMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Get200Response {\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("  IpNumber: ").Append(IpNumber).Append("\n");
            sb.Append("  IpVersion: ").Append(IpVersion).Append("\n");
            sb.Append("  CountryName: ").Append(CountryName).Append("\n");
            sb.Append("  CountryCode2: ").Append(CountryCode2).Append("\n");
            sb.Append("  Isp: ").Append(Isp).Append("\n");
            sb.Append("  ResponseCode: ").Append(ResponseCode).Append("\n");
            sb.Append("  ResponseMessage: ").Append(ResponseMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Get200Response)obj);
        }

        /// <summary>
        /// Returns true if Get200Response instances are equal
        /// </summary>
        /// <param name="other">Instance of Get200Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Get200Response other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Ip == other.Ip ||
                    Ip != null &&
                    Ip.Equals(other.Ip)
                ) && 
                (
                    IpNumber == other.IpNumber ||
                    IpNumber != null &&
                    IpNumber.Equals(other.IpNumber)
                ) && 
                (
                    IpVersion == other.IpVersion ||
                    
                    IpVersion.Equals(other.IpVersion)
                ) && 
                (
                    CountryName == other.CountryName ||
                    CountryName != null &&
                    CountryName.Equals(other.CountryName)
                ) && 
                (
                    CountryCode2 == other.CountryCode2 ||
                    CountryCode2 != null &&
                    CountryCode2.Equals(other.CountryCode2)
                ) && 
                (
                    Isp == other.Isp ||
                    Isp != null &&
                    Isp.Equals(other.Isp)
                ) && 
                (
                    ResponseCode == other.ResponseCode ||
                    ResponseCode != null &&
                    ResponseCode.Equals(other.ResponseCode)
                ) && 
                (
                    ResponseMessage == other.ResponseMessage ||
                    ResponseMessage != null &&
                    ResponseMessage.Equals(other.ResponseMessage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Ip != null)
                    hashCode = hashCode * 59 + Ip.GetHashCode();
                    if (IpNumber != null)
                    hashCode = hashCode * 59 + IpNumber.GetHashCode();
                    
                    hashCode = hashCode * 59 + IpVersion.GetHashCode();
                    if (CountryName != null)
                    hashCode = hashCode * 59 + CountryName.GetHashCode();
                    if (CountryCode2 != null)
                    hashCode = hashCode * 59 + CountryCode2.GetHashCode();
                    if (Isp != null)
                    hashCode = hashCode * 59 + Isp.GetHashCode();
                    if (ResponseCode != null)
                    hashCode = hashCode * 59 + ResponseCode.GetHashCode();
                    if (ResponseMessage != null)
                    hashCode = hashCode * 59 + ResponseMessage.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Get200Response left, Get200Response right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Get200Response left, Get200Response right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
