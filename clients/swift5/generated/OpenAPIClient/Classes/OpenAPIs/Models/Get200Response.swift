//
// Get200Response.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Get200Response: Codable, JSONEncodable, Hashable {

    /** IPv4 or IPv6 address used to lookup geolocation. */
    public var ip: AnyCodable?
    /** IP number in long integer. */
    public var ipNumber: AnyCodable?
    /** IP version either 4 or 6. */
    public var ipVersion: AnyCodable?
    /** Full name of the IP country. */
    public var countryName: AnyCodable?
    /** ISO ALPHA-2 Country Code. */
    public var countryCode2: AnyCodable?
    /** Internet Service Provider (ISP) who owns the IP address. */
    public var isp: AnyCodable?
    /** Response status code to indicate success or failed completion of the API call. */
    public var responseCode: AnyCodable?
    /** Response message to indicate success or failed completion of the API call. */
    public var responseMessage: AnyCodable?

    public init(ip: AnyCodable? = nil, ipNumber: AnyCodable? = nil, ipVersion: AnyCodable? = nil, countryName: AnyCodable? = nil, countryCode2: AnyCodable? = nil, isp: AnyCodable? = nil, responseCode: AnyCodable? = nil, responseMessage: AnyCodable? = nil) {
        self.ip = ip
        self.ipNumber = ipNumber
        self.ipVersion = ipVersion
        self.countryName = countryName
        self.countryCode2 = countryCode2
        self.isp = isp
        self.responseCode = responseCode
        self.responseMessage = responseMessage
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case ip
        case ipNumber = "ip_number"
        case ipVersion = "ip_version"
        case countryName = "country_name"
        case countryCode2 = "country_code2"
        case isp
        case responseCode = "response_code"
        case responseMessage = "response_message"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(ip, forKey: .ip)
        try container.encodeIfPresent(ipNumber, forKey: .ipNumber)
        try container.encodeIfPresent(ipVersion, forKey: .ipVersion)
        try container.encodeIfPresent(countryName, forKey: .countryName)
        try container.encodeIfPresent(countryCode2, forKey: .countryCode2)
        try container.encodeIfPresent(isp, forKey: .isp)
        try container.encodeIfPresent(responseCode, forKey: .responseCode)
        try container.encodeIfPresent(responseMessage, forKey: .responseMessage)
    }
}

