//
// DefaultAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DefaultAPI {

    /**
     Get geolocation of an IP address
     
     - parameter ip: (query) An IPv4 or IPv6 address that you would like to lookup. 
     - parameter format: (query) Output format, the following formats are supported: plain xml json jsonp php csv serialized (optional)
     - parameter delimiter: (query) Delimiter between proxies. Can be used only with format plain. The following types are supported: 1 for \&quot;\\n\&quot;, 2 for \&quot;&lt;br&gt;\&quot;. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func rootGet(ip: AnyCodable, format: AnyCodable? = nil, delimiter: AnyCodable? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Get200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return rootGetWithRequestBuilder(ip: ip, format: format, delimiter: delimiter).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get geolocation of an IP address
     - GET /
     - Retrieve geolocation of an IP address. 
     - parameter ip: (query) An IPv4 or IPv6 address that you would like to lookup. 
     - parameter format: (query) Output format, the following formats are supported: plain xml json jsonp php csv serialized (optional)
     - parameter delimiter: (query) Delimiter between proxies. Can be used only with format plain. The following types are supported: 1 for \&quot;\\n\&quot;, 2 for \&quot;&lt;br&gt;\&quot;. (optional)
     - returns: RequestBuilder<Get200Response> 
     */
    open class func rootGetWithRequestBuilder(ip: AnyCodable, format: AnyCodable? = nil, delimiter: AnyCodable? = nil) -> RequestBuilder<Get200Response> {
        let localVariablePath = "/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ip": (wrappedValue: ip.encodeToJSON(), isExplode: true),
            "format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
            "delimiter": (wrappedValue: delimiter?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Get200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
