# coding: utf-8

"""
    iplocation.net API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.9.0-pre.0
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field

class Get200Response(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    ip: Optional[Any] = Field(None, description="IPv4 or IPv6 address used to lookup geolocation.")
    ip_number: Optional[Any] = Field(None, description="IP number in long integer.")
    ip_version: Optional[Any] = Field(None, description="IP version either 4 or 6.")
    country_name: Optional[Any] = Field(None, description="Full name of the IP country.")
    country_code2: Optional[Any] = Field(None, description="ISO ALPHA-2 Country Code.")
    isp: Optional[Any] = Field(None, description="Internet Service Provider (ISP) who owns the IP address.")
    response_code: Optional[Any] = Field(None, description="Response status code to indicate success or failed completion of the API call.")
    response_message: Optional[Any] = Field(None, description="Response message to indicate success or failed completion of the API call.")
    __properties = ["ip", "ip_number", "ip_version", "country_name", "country_code2", "isp", "response_code", "response_message"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Get200Response:
        """Create an instance of Get200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if ip (nullable) is None
        if self.ip is None:
            _dict['ip'] = None

        # set to None if ip_number (nullable) is None
        if self.ip_number is None:
            _dict['ip_number'] = None

        # set to None if ip_version (nullable) is None
        if self.ip_version is None:
            _dict['ip_version'] = None

        # set to None if country_name (nullable) is None
        if self.country_name is None:
            _dict['country_name'] = None

        # set to None if country_code2 (nullable) is None
        if self.country_code2 is None:
            _dict['country_code2'] = None

        # set to None if isp (nullable) is None
        if self.isp is None:
            _dict['isp'] = None

        # set to None if response_code (nullable) is None
        if self.response_code is None:
            _dict['response_code'] = None

        # set to None if response_message (nullable) is None
        if self.response_message is None:
            _dict['response_message'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Get200Response:
        """Create an instance of Get200Response from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Get200Response.parse_obj(obj)

        _obj = Get200Response.parse_obj({
            "ip": obj.get("ip"),
            "ip_number": obj.get("ip_number"),
            "ip_version": obj.get("ip_version"),
            "country_name": obj.get("country_name"),
            "country_code2": obj.get("country_code2"),
            "isp": obj.get("isp"),
            "response_code": obj.get("response_code"),
            "response_message": obj.get("response_message")
        })
        return _obj

