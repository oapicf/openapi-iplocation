// <auto-generated>
/*
 * iplocation.net API
 *
 * OpenAPI v3 specification and a set of generated API clients for iplocation.net
 *
 * The version of the OpenAPI document: 1.1.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Get200Response
    /// </summary>
    public partial class Get200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Get200Response" /> class.
        /// </summary>
        /// <param name="ip">IPv4 or IPv6 address used to lookup geolocation.</param>
        /// <param name="ipNumber">IP number in long integer (represented as string).</param>
        /// <param name="ipVersion">IP version either 4 or 6.</param>
        /// <param name="countryName">Full name of the IP country.</param>
        /// <param name="countryCode2">ISO ALPHA-2 Country Code.</param>
        /// <param name="isp">Internet Service Provider (ISP) who owns the IP address.</param>
        /// <param name="responseCode">Response status code to indicate success or failed completion of the API call.</param>
        /// <param name="responseMessage">Response message to indicate success or failed completion of the API call.</param>
        [JsonConstructor]
        public Get200Response(Option<string?> ip = default, Option<string?> ipNumber = default, Option<int?> ipVersion = default, Option<string?> countryName = default, Option<string?> countryCode2 = default, Option<string?> isp = default, Option<string?> responseCode = default, Option<string?> responseMessage = default)
        {
            IpOption = ip;
            IpNumberOption = ipNumber;
            IpVersionOption = ipVersion;
            CountryNameOption = countryName;
            CountryCode2Option = countryCode2;
            IspOption = isp;
            ResponseCodeOption = responseCode;
            ResponseMessageOption = responseMessage;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Ip
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IpOption { get; private set; }

        /// <summary>
        /// IPv4 or IPv6 address used to lookup geolocation.
        /// </summary>
        /// <value>IPv4 or IPv6 address used to lookup geolocation.</value>
        [JsonPropertyName("ip")]
        public string? Ip { get { return this.IpOption; } set { this.IpOption = new(value); } }

        /// <summary>
        /// Used to track the state of IpNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IpNumberOption { get; private set; }

        /// <summary>
        /// IP number in long integer (represented as string).
        /// </summary>
        /// <value>IP number in long integer (represented as string).</value>
        [JsonPropertyName("ip_number")]
        public string? IpNumber { get { return this.IpNumberOption; } set { this.IpNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of IpVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IpVersionOption { get; private set; }

        /// <summary>
        /// IP version either 4 or 6.
        /// </summary>
        /// <value>IP version either 4 or 6.</value>
        [JsonPropertyName("ip_version")]
        public int? IpVersion { get { return this.IpVersionOption; } set { this.IpVersionOption = new(value); } }

        /// <summary>
        /// Used to track the state of CountryName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CountryNameOption { get; private set; }

        /// <summary>
        /// Full name of the IP country.
        /// </summary>
        /// <value>Full name of the IP country.</value>
        [JsonPropertyName("country_name")]
        public string? CountryName { get { return this.CountryNameOption; } set { this.CountryNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of CountryCode2
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CountryCode2Option { get; private set; }

        /// <summary>
        /// ISO ALPHA-2 Country Code.
        /// </summary>
        /// <value>ISO ALPHA-2 Country Code.</value>
        [JsonPropertyName("country_code2")]
        public string? CountryCode2 { get { return this.CountryCode2Option; } set { this.CountryCode2Option = new(value); } }

        /// <summary>
        /// Used to track the state of Isp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IspOption { get; private set; }

        /// <summary>
        /// Internet Service Provider (ISP) who owns the IP address.
        /// </summary>
        /// <value>Internet Service Provider (ISP) who owns the IP address.</value>
        [JsonPropertyName("isp")]
        public string? Isp { get { return this.IspOption; } set { this.IspOption = new(value); } }

        /// <summary>
        /// Used to track the state of ResponseCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ResponseCodeOption { get; private set; }

        /// <summary>
        /// Response status code to indicate success or failed completion of the API call.
        /// </summary>
        /// <value>Response status code to indicate success or failed completion of the API call.</value>
        [JsonPropertyName("response_code")]
        public string? ResponseCode { get { return this.ResponseCodeOption; } set { this.ResponseCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ResponseMessage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ResponseMessageOption { get; private set; }

        /// <summary>
        /// Response message to indicate success or failed completion of the API call.
        /// </summary>
        /// <value>Response message to indicate success or failed completion of the API call.</value>
        [JsonPropertyName("response_message")]
        public string? ResponseMessage { get { return this.ResponseMessageOption; } set { this.ResponseMessageOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Get200Response {\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("  IpNumber: ").Append(IpNumber).Append("\n");
            sb.Append("  IpVersion: ").Append(IpVersion).Append("\n");
            sb.Append("  CountryName: ").Append(CountryName).Append("\n");
            sb.Append("  CountryCode2: ").Append(CountryCode2).Append("\n");
            sb.Append("  Isp: ").Append(Isp).Append("\n");
            sb.Append("  ResponseCode: ").Append(ResponseCode).Append("\n");
            sb.Append("  ResponseMessage: ").Append(ResponseMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Get200Response" />
    /// </summary>
    public class Get200ResponseJsonConverter : JsonConverter<Get200Response>
    {
        /// <summary>
        /// Deserializes json to <see cref="Get200Response" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Get200Response Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> ip = default;
            Option<string?> ipNumber = default;
            Option<int?> ipVersion = default;
            Option<string?> countryName = default;
            Option<string?> countryCode2 = default;
            Option<string?> isp = default;
            Option<string?> responseCode = default;
            Option<string?> responseMessage = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "ip":
                            ip = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "ip_number":
                            ipNumber = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "ip_version":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                ipVersion = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "country_name":
                            countryName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "country_code2":
                            countryCode2 = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "isp":
                            isp = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "response_code":
                            responseCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "response_message":
                            responseMessage = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (ip.IsSet && ip.Value == null)
                throw new ArgumentNullException(nameof(ip), "Property is not nullable for class Get200Response.");

            if (ipNumber.IsSet && ipNumber.Value == null)
                throw new ArgumentNullException(nameof(ipNumber), "Property is not nullable for class Get200Response.");

            if (ipVersion.IsSet && ipVersion.Value == null)
                throw new ArgumentNullException(nameof(ipVersion), "Property is not nullable for class Get200Response.");

            if (countryName.IsSet && countryName.Value == null)
                throw new ArgumentNullException(nameof(countryName), "Property is not nullable for class Get200Response.");

            if (countryCode2.IsSet && countryCode2.Value == null)
                throw new ArgumentNullException(nameof(countryCode2), "Property is not nullable for class Get200Response.");

            if (isp.IsSet && isp.Value == null)
                throw new ArgumentNullException(nameof(isp), "Property is not nullable for class Get200Response.");

            if (responseCode.IsSet && responseCode.Value == null)
                throw new ArgumentNullException(nameof(responseCode), "Property is not nullable for class Get200Response.");

            if (responseMessage.IsSet && responseMessage.Value == null)
                throw new ArgumentNullException(nameof(responseMessage), "Property is not nullable for class Get200Response.");

            return new Get200Response(ip, ipNumber, ipVersion, countryName, countryCode2, isp, responseCode, responseMessage);
        }

        /// <summary>
        /// Serializes a <see cref="Get200Response" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="get200Response"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Get200Response get200Response, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, get200Response, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Get200Response" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="get200Response"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Get200Response get200Response, JsonSerializerOptions jsonSerializerOptions)
        {
            if (get200Response.IpOption.IsSet && get200Response.Ip == null)
                throw new ArgumentNullException(nameof(get200Response.Ip), "Property is required for class Get200Response.");

            if (get200Response.IpNumberOption.IsSet && get200Response.IpNumber == null)
                throw new ArgumentNullException(nameof(get200Response.IpNumber), "Property is required for class Get200Response.");

            if (get200Response.CountryNameOption.IsSet && get200Response.CountryName == null)
                throw new ArgumentNullException(nameof(get200Response.CountryName), "Property is required for class Get200Response.");

            if (get200Response.CountryCode2Option.IsSet && get200Response.CountryCode2 == null)
                throw new ArgumentNullException(nameof(get200Response.CountryCode2), "Property is required for class Get200Response.");

            if (get200Response.IspOption.IsSet && get200Response.Isp == null)
                throw new ArgumentNullException(nameof(get200Response.Isp), "Property is required for class Get200Response.");

            if (get200Response.ResponseCodeOption.IsSet && get200Response.ResponseCode == null)
                throw new ArgumentNullException(nameof(get200Response.ResponseCode), "Property is required for class Get200Response.");

            if (get200Response.ResponseMessageOption.IsSet && get200Response.ResponseMessage == null)
                throw new ArgumentNullException(nameof(get200Response.ResponseMessage), "Property is required for class Get200Response.");

            if (get200Response.IpOption.IsSet)
                writer.WriteString("ip", get200Response.Ip);

            if (get200Response.IpNumberOption.IsSet)
                writer.WriteString("ip_number", get200Response.IpNumber);

            if (get200Response.IpVersionOption.IsSet)
                writer.WriteNumber("ip_version", get200Response.IpVersionOption.Value!.Value);

            if (get200Response.CountryNameOption.IsSet)
                writer.WriteString("country_name", get200Response.CountryName);

            if (get200Response.CountryCode2Option.IsSet)
                writer.WriteString("country_code2", get200Response.CountryCode2);

            if (get200Response.IspOption.IsSet)
                writer.WriteString("isp", get200Response.Isp);

            if (get200Response.ResponseCodeOption.IsSet)
                writer.WriteString("response_code", get200Response.ResponseCode);

            if (get200Response.ResponseMessageOption.IsSet)
                writer.WriteString("response_message", get200Response.ResponseMessage);
        }
    }
}
