// <auto-generated>
/*
 * iplocation.net API
 *
 * OpenAPI v3 specification and a set of generated API clients for iplocation.net
 *
 * The version of the OpenAPI document: 1.1.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Get400Response
    /// </summary>
    public partial class Get400Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Get400Response" /> class.
        /// </summary>
        /// <param name="responseCode">Response status code to indicate success or failed completion of the API call.</param>
        /// <param name="responseMessage">Response message to indicate success or failed completion of the API call.</param>
        [JsonConstructor]
        public Get400Response(Option<string?> responseCode = default, Option<string?> responseMessage = default)
        {
            ResponseCodeOption = responseCode;
            ResponseMessageOption = responseMessage;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ResponseCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ResponseCodeOption { get; private set; }

        /// <summary>
        /// Response status code to indicate success or failed completion of the API call.
        /// </summary>
        /// <value>Response status code to indicate success or failed completion of the API call.</value>
        [JsonPropertyName("response_code")]
        public string? ResponseCode { get { return this.ResponseCodeOption; } set { this.ResponseCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ResponseMessage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ResponseMessageOption { get; private set; }

        /// <summary>
        /// Response message to indicate success or failed completion of the API call.
        /// </summary>
        /// <value>Response message to indicate success or failed completion of the API call.</value>
        [JsonPropertyName("response_message")]
        public string? ResponseMessage { get { return this.ResponseMessageOption; } set { this.ResponseMessageOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Get400Response {\n");
            sb.Append("  ResponseCode: ").Append(ResponseCode).Append("\n");
            sb.Append("  ResponseMessage: ").Append(ResponseMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Get400Response" />
    /// </summary>
    public class Get400ResponseJsonConverter : JsonConverter<Get400Response>
    {
        /// <summary>
        /// Deserializes json to <see cref="Get400Response" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Get400Response Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> responseCode = default;
            Option<string?> responseMessage = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "response_code":
                            responseCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "response_message":
                            responseMessage = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (responseCode.IsSet && responseCode.Value == null)
                throw new ArgumentNullException(nameof(responseCode), "Property is not nullable for class Get400Response.");

            if (responseMessage.IsSet && responseMessage.Value == null)
                throw new ArgumentNullException(nameof(responseMessage), "Property is not nullable for class Get400Response.");

            return new Get400Response(responseCode, responseMessage);
        }

        /// <summary>
        /// Serializes a <see cref="Get400Response" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="get400Response"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Get400Response get400Response, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, get400Response, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Get400Response" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="get400Response"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Get400Response get400Response, JsonSerializerOptions jsonSerializerOptions)
        {
            if (get400Response.ResponseCodeOption.IsSet && get400Response.ResponseCode == null)
                throw new ArgumentNullException(nameof(get400Response.ResponseCode), "Property is required for class Get400Response.");

            if (get400Response.ResponseMessageOption.IsSet && get400Response.ResponseMessage == null)
                throw new ArgumentNullException(nameof(get400Response.ResponseMessage), "Property is required for class Get400Response.");

            if (get400Response.ResponseCodeOption.IsSet)
                writer.WriteString("response_code", get400Response.ResponseCode);

            if (get400Response.ResponseMessageOption.IsSet)
                writer.WriteString("response_message", get400Response.ResponseMessage);
        }
    }
}
