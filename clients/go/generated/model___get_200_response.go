/*
iplocation.net API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.9.0-pre.0
Contact: blah@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Get200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Get200Response{}

// Get200Response struct for Get200Response
type Get200Response struct {
	// IPv4 or IPv6 address used to lookup geolocation.
	Ip interface{} `json:"ip,omitempty"`
	// IP number in long integer.
	IpNumber interface{} `json:"ip_number,omitempty"`
	// IP version either 4 or 6.
	IpVersion interface{} `json:"ip_version,omitempty"`
	// Full name of the IP country.
	CountryName interface{} `json:"country_name,omitempty"`
	// ISO ALPHA-2 Country Code.
	CountryCode2 interface{} `json:"country_code2,omitempty"`
	// Internet Service Provider (ISP) who owns the IP address.
	Isp interface{} `json:"isp,omitempty"`
	// Response status code to indicate success or failed completion of the API call.
	ResponseCode interface{} `json:"response_code,omitempty"`
	// Response message to indicate success or failed completion of the API call.
	ResponseMessage interface{} `json:"response_message,omitempty"`
}

// NewGet200Response instantiates a new Get200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGet200Response() *Get200Response {
	this := Get200Response{}
	return &this
}

// NewGet200ResponseWithDefaults instantiates a new Get200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGet200ResponseWithDefaults() *Get200Response {
	this := Get200Response{}
	return &this
}

// GetIp returns the Ip field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Get200Response) GetIp() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Get200Response) GetIpOk() (*interface{}, bool) {
	if o == nil || isNil(o.Ip) {
		return nil, false
	}
	return &o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *Get200Response) HasIp() bool {
	if o != nil && isNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given interface{} and assigns it to the Ip field.
func (o *Get200Response) SetIp(v interface{}) {
	o.Ip = v
}

// GetIpNumber returns the IpNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Get200Response) GetIpNumber() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.IpNumber
}

// GetIpNumberOk returns a tuple with the IpNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Get200Response) GetIpNumberOk() (*interface{}, bool) {
	if o == nil || isNil(o.IpNumber) {
		return nil, false
	}
	return &o.IpNumber, true
}

// HasIpNumber returns a boolean if a field has been set.
func (o *Get200Response) HasIpNumber() bool {
	if o != nil && isNil(o.IpNumber) {
		return true
	}

	return false
}

// SetIpNumber gets a reference to the given interface{} and assigns it to the IpNumber field.
func (o *Get200Response) SetIpNumber(v interface{}) {
	o.IpNumber = v
}

// GetIpVersion returns the IpVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Get200Response) GetIpVersion() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.IpVersion
}

// GetIpVersionOk returns a tuple with the IpVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Get200Response) GetIpVersionOk() (*interface{}, bool) {
	if o == nil || isNil(o.IpVersion) {
		return nil, false
	}
	return &o.IpVersion, true
}

// HasIpVersion returns a boolean if a field has been set.
func (o *Get200Response) HasIpVersion() bool {
	if o != nil && isNil(o.IpVersion) {
		return true
	}

	return false
}

// SetIpVersion gets a reference to the given interface{} and assigns it to the IpVersion field.
func (o *Get200Response) SetIpVersion(v interface{}) {
	o.IpVersion = v
}

// GetCountryName returns the CountryName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Get200Response) GetCountryName() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.CountryName
}

// GetCountryNameOk returns a tuple with the CountryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Get200Response) GetCountryNameOk() (*interface{}, bool) {
	if o == nil || isNil(o.CountryName) {
		return nil, false
	}
	return &o.CountryName, true
}

// HasCountryName returns a boolean if a field has been set.
func (o *Get200Response) HasCountryName() bool {
	if o != nil && isNil(o.CountryName) {
		return true
	}

	return false
}

// SetCountryName gets a reference to the given interface{} and assigns it to the CountryName field.
func (o *Get200Response) SetCountryName(v interface{}) {
	o.CountryName = v
}

// GetCountryCode2 returns the CountryCode2 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Get200Response) GetCountryCode2() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.CountryCode2
}

// GetCountryCode2Ok returns a tuple with the CountryCode2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Get200Response) GetCountryCode2Ok() (*interface{}, bool) {
	if o == nil || isNil(o.CountryCode2) {
		return nil, false
	}
	return &o.CountryCode2, true
}

// HasCountryCode2 returns a boolean if a field has been set.
func (o *Get200Response) HasCountryCode2() bool {
	if o != nil && isNil(o.CountryCode2) {
		return true
	}

	return false
}

// SetCountryCode2 gets a reference to the given interface{} and assigns it to the CountryCode2 field.
func (o *Get200Response) SetCountryCode2(v interface{}) {
	o.CountryCode2 = v
}

// GetIsp returns the Isp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Get200Response) GetIsp() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Isp
}

// GetIspOk returns a tuple with the Isp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Get200Response) GetIspOk() (*interface{}, bool) {
	if o == nil || isNil(o.Isp) {
		return nil, false
	}
	return &o.Isp, true
}

// HasIsp returns a boolean if a field has been set.
func (o *Get200Response) HasIsp() bool {
	if o != nil && isNil(o.Isp) {
		return true
	}

	return false
}

// SetIsp gets a reference to the given interface{} and assigns it to the Isp field.
func (o *Get200Response) SetIsp(v interface{}) {
	o.Isp = v
}

// GetResponseCode returns the ResponseCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Get200Response) GetResponseCode() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ResponseCode
}

// GetResponseCodeOk returns a tuple with the ResponseCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Get200Response) GetResponseCodeOk() (*interface{}, bool) {
	if o == nil || isNil(o.ResponseCode) {
		return nil, false
	}
	return &o.ResponseCode, true
}

// HasResponseCode returns a boolean if a field has been set.
func (o *Get200Response) HasResponseCode() bool {
	if o != nil && isNil(o.ResponseCode) {
		return true
	}

	return false
}

// SetResponseCode gets a reference to the given interface{} and assigns it to the ResponseCode field.
func (o *Get200Response) SetResponseCode(v interface{}) {
	o.ResponseCode = v
}

// GetResponseMessage returns the ResponseMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Get200Response) GetResponseMessage() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ResponseMessage
}

// GetResponseMessageOk returns a tuple with the ResponseMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Get200Response) GetResponseMessageOk() (*interface{}, bool) {
	if o == nil || isNil(o.ResponseMessage) {
		return nil, false
	}
	return &o.ResponseMessage, true
}

// HasResponseMessage returns a boolean if a field has been set.
func (o *Get200Response) HasResponseMessage() bool {
	if o != nil && isNil(o.ResponseMessage) {
		return true
	}

	return false
}

// SetResponseMessage gets a reference to the given interface{} and assigns it to the ResponseMessage field.
func (o *Get200Response) SetResponseMessage(v interface{}) {
	o.ResponseMessage = v
}

func (o Get200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Get200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Ip != nil {
		toSerialize["ip"] = o.Ip
	}
	if o.IpNumber != nil {
		toSerialize["ip_number"] = o.IpNumber
	}
	if o.IpVersion != nil {
		toSerialize["ip_version"] = o.IpVersion
	}
	if o.CountryName != nil {
		toSerialize["country_name"] = o.CountryName
	}
	if o.CountryCode2 != nil {
		toSerialize["country_code2"] = o.CountryCode2
	}
	if o.Isp != nil {
		toSerialize["isp"] = o.Isp
	}
	if o.ResponseCode != nil {
		toSerialize["response_code"] = o.ResponseCode
	}
	if o.ResponseMessage != nil {
		toSerialize["response_message"] = o.ResponseMessage
	}
	return toSerialize, nil
}

type NullableGet200Response struct {
	value *Get200Response
	isSet bool
}

func (v NullableGet200Response) Get() *Get200Response {
	return v.value
}

func (v *NullableGet200Response) Set(val *Get200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGet200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGet200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGet200Response(val *Get200Response) *NullableGet200Response {
	return &NullableGet200Response{value: val, isSet: true}
}

func (v NullableGet200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGet200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


