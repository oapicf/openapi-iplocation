/*
iplocation.net API

OpenAPI v3 specification and a set of generated API clients for iplocation.net

API version: 1.0.1-pre.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Get400Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Get400Response{}

// Get400Response struct for Get400Response
type Get400Response struct {
	// Response status code to indicate success or failed completion of the API call.
	ResponseCode *string `json:"response_code,omitempty"`
	// Response message to indicate success or failed completion of the API call.
	ResponseMessage *string `json:"response_message,omitempty"`
}

// NewGet400Response instantiates a new Get400Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGet400Response() *Get400Response {
	this := Get400Response{}
	return &this
}

// NewGet400ResponseWithDefaults instantiates a new Get400Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGet400ResponseWithDefaults() *Get400Response {
	this := Get400Response{}
	return &this
}

// GetResponseCode returns the ResponseCode field value if set, zero value otherwise.
func (o *Get400Response) GetResponseCode() string {
	if o == nil || IsNil(o.ResponseCode) {
		var ret string
		return ret
	}
	return *o.ResponseCode
}

// GetResponseCodeOk returns a tuple with the ResponseCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Get400Response) GetResponseCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ResponseCode) {
		return nil, false
	}
	return o.ResponseCode, true
}

// HasResponseCode returns a boolean if a field has been set.
func (o *Get400Response) HasResponseCode() bool {
	if o != nil && !IsNil(o.ResponseCode) {
		return true
	}

	return false
}

// SetResponseCode gets a reference to the given string and assigns it to the ResponseCode field.
func (o *Get400Response) SetResponseCode(v string) {
	o.ResponseCode = &v
}

// GetResponseMessage returns the ResponseMessage field value if set, zero value otherwise.
func (o *Get400Response) GetResponseMessage() string {
	if o == nil || IsNil(o.ResponseMessage) {
		var ret string
		return ret
	}
	return *o.ResponseMessage
}

// GetResponseMessageOk returns a tuple with the ResponseMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Get400Response) GetResponseMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ResponseMessage) {
		return nil, false
	}
	return o.ResponseMessage, true
}

// HasResponseMessage returns a boolean if a field has been set.
func (o *Get400Response) HasResponseMessage() bool {
	if o != nil && !IsNil(o.ResponseMessage) {
		return true
	}

	return false
}

// SetResponseMessage gets a reference to the given string and assigns it to the ResponseMessage field.
func (o *Get400Response) SetResponseMessage(v string) {
	o.ResponseMessage = &v
}

func (o Get400Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Get400Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ResponseCode) {
		toSerialize["response_code"] = o.ResponseCode
	}
	if !IsNil(o.ResponseMessage) {
		toSerialize["response_message"] = o.ResponseMessage
	}
	return toSerialize, nil
}

type NullableGet400Response struct {
	value *Get400Response
	isSet bool
}

func (v NullableGet400Response) Get() *Get400Response {
	return v.value
}

func (v *NullableGet400Response) Set(val *Get400Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGet400Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGet400Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGet400Response(val *Get400Response) *NullableGet400Response {
	return &NullableGet400Response{value: val, isSet: true}
}

func (v NullableGet400Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGet400Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


