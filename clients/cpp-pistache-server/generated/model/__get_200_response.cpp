/**
* iplocation.net API
* OpenAPI v3 specification and a set of generated API clients for iplocation.net
*
* The version of the OpenAPI document: 1.0.1-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "__get_200_response.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

__get_200_response::__get_200_response()
{
    m_Ip = "";
    m_IpIsSet = false;
    m_Ip_number = "";
    m_Ip_numberIsSet = false;
    m_Ip_version = 0;
    m_Ip_versionIsSet = false;
    m_Country_name = "";
    m_Country_nameIsSet = false;
    m_Country_code2 = "";
    m_Country_code2IsSet = false;
    m_Isp = "";
    m_IspIsSet = false;
    m_Response_code = "";
    m_Response_codeIsSet = false;
    m_Response_message = "";
    m_Response_messageIsSet = false;
    
}

void __get_200_response::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool __get_200_response::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool __get_200_response::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "__get_200_response" : pathPrefix;

                                    
    return success;
}

bool __get_200_response::operator==(const __get_200_response& rhs) const
{
    return
    
    
    
    ((!ipIsSet() && !rhs.ipIsSet()) || (ipIsSet() && rhs.ipIsSet() && getIp() == rhs.getIp())) &&
    
    
    ((!ipNumberIsSet() && !rhs.ipNumberIsSet()) || (ipNumberIsSet() && rhs.ipNumberIsSet() && getIpNumber() == rhs.getIpNumber())) &&
    
    
    ((!ipVersionIsSet() && !rhs.ipVersionIsSet()) || (ipVersionIsSet() && rhs.ipVersionIsSet() && getIpVersion() == rhs.getIpVersion())) &&
    
    
    ((!countryNameIsSet() && !rhs.countryNameIsSet()) || (countryNameIsSet() && rhs.countryNameIsSet() && getCountryName() == rhs.getCountryName())) &&
    
    
    ((!countryCode2IsSet() && !rhs.countryCode2IsSet()) || (countryCode2IsSet() && rhs.countryCode2IsSet() && getCountryCode2() == rhs.getCountryCode2())) &&
    
    
    ((!ispIsSet() && !rhs.ispIsSet()) || (ispIsSet() && rhs.ispIsSet() && getIsp() == rhs.getIsp())) &&
    
    
    ((!responseCodeIsSet() && !rhs.responseCodeIsSet()) || (responseCodeIsSet() && rhs.responseCodeIsSet() && getResponseCode() == rhs.getResponseCode())) &&
    
    
    ((!responseMessageIsSet() && !rhs.responseMessageIsSet()) || (responseMessageIsSet() && rhs.responseMessageIsSet() && getResponseMessage() == rhs.getResponseMessage()))
    
    ;
}

bool __get_200_response::operator!=(const __get_200_response& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const __get_200_response& o)
{
    j = nlohmann::json::object();
    if(o.ipIsSet())
        j["ip"] = o.m_Ip;
    if(o.ipNumberIsSet())
        j["ip_number"] = o.m_Ip_number;
    if(o.ipVersionIsSet())
        j["ip_version"] = o.m_Ip_version;
    if(o.countryNameIsSet())
        j["country_name"] = o.m_Country_name;
    if(o.countryCode2IsSet())
        j["country_code2"] = o.m_Country_code2;
    if(o.ispIsSet())
        j["isp"] = o.m_Isp;
    if(o.responseCodeIsSet())
        j["response_code"] = o.m_Response_code;
    if(o.responseMessageIsSet())
        j["response_message"] = o.m_Response_message;
    
}

void from_json(const nlohmann::json& j, __get_200_response& o)
{
    if(j.find("ip") != j.end())
    {
        j.at("ip").get_to(o.m_Ip);
        o.m_IpIsSet = true;
    } 
    if(j.find("ip_number") != j.end())
    {
        j.at("ip_number").get_to(o.m_Ip_number);
        o.m_Ip_numberIsSet = true;
    } 
    if(j.find("ip_version") != j.end())
    {
        j.at("ip_version").get_to(o.m_Ip_version);
        o.m_Ip_versionIsSet = true;
    } 
    if(j.find("country_name") != j.end())
    {
        j.at("country_name").get_to(o.m_Country_name);
        o.m_Country_nameIsSet = true;
    } 
    if(j.find("country_code2") != j.end())
    {
        j.at("country_code2").get_to(o.m_Country_code2);
        o.m_Country_code2IsSet = true;
    } 
    if(j.find("isp") != j.end())
    {
        j.at("isp").get_to(o.m_Isp);
        o.m_IspIsSet = true;
    } 
    if(j.find("response_code") != j.end())
    {
        j.at("response_code").get_to(o.m_Response_code);
        o.m_Response_codeIsSet = true;
    } 
    if(j.find("response_message") != j.end())
    {
        j.at("response_message").get_to(o.m_Response_message);
        o.m_Response_messageIsSet = true;
    } 
    
}

std::string __get_200_response::getIp() const
{
    return m_Ip;
}
void __get_200_response::setIp(std::string const& value)
{
    m_Ip = value;
    m_IpIsSet = true;
}
bool __get_200_response::ipIsSet() const
{
    return m_IpIsSet;
}
void __get_200_response::unsetIp()
{
    m_IpIsSet = false;
}
std::string __get_200_response::getIpNumber() const
{
    return m_Ip_number;
}
void __get_200_response::setIpNumber(std::string const& value)
{
    m_Ip_number = value;
    m_Ip_numberIsSet = true;
}
bool __get_200_response::ipNumberIsSet() const
{
    return m_Ip_numberIsSet;
}
void __get_200_response::unsetIp_number()
{
    m_Ip_numberIsSet = false;
}
int32_t __get_200_response::getIpVersion() const
{
    return m_Ip_version;
}
void __get_200_response::setIpVersion(int32_t const value)
{
    m_Ip_version = value;
    m_Ip_versionIsSet = true;
}
bool __get_200_response::ipVersionIsSet() const
{
    return m_Ip_versionIsSet;
}
void __get_200_response::unsetIp_version()
{
    m_Ip_versionIsSet = false;
}
std::string __get_200_response::getCountryName() const
{
    return m_Country_name;
}
void __get_200_response::setCountryName(std::string const& value)
{
    m_Country_name = value;
    m_Country_nameIsSet = true;
}
bool __get_200_response::countryNameIsSet() const
{
    return m_Country_nameIsSet;
}
void __get_200_response::unsetCountry_name()
{
    m_Country_nameIsSet = false;
}
std::string __get_200_response::getCountryCode2() const
{
    return m_Country_code2;
}
void __get_200_response::setCountryCode2(std::string const& value)
{
    m_Country_code2 = value;
    m_Country_code2IsSet = true;
}
bool __get_200_response::countryCode2IsSet() const
{
    return m_Country_code2IsSet;
}
void __get_200_response::unsetCountry_code2()
{
    m_Country_code2IsSet = false;
}
std::string __get_200_response::getIsp() const
{
    return m_Isp;
}
void __get_200_response::setIsp(std::string const& value)
{
    m_Isp = value;
    m_IspIsSet = true;
}
bool __get_200_response::ispIsSet() const
{
    return m_IspIsSet;
}
void __get_200_response::unsetIsp()
{
    m_IspIsSet = false;
}
std::string __get_200_response::getResponseCode() const
{
    return m_Response_code;
}
void __get_200_response::setResponseCode(std::string const& value)
{
    m_Response_code = value;
    m_Response_codeIsSet = true;
}
bool __get_200_response::responseCodeIsSet() const
{
    return m_Response_codeIsSet;
}
void __get_200_response::unsetResponse_code()
{
    m_Response_codeIsSet = false;
}
std::string __get_200_response::getResponseMessage() const
{
    return m_Response_message;
}
void __get_200_response::setResponseMessage(std::string const& value)
{
    m_Response_message = value;
    m_Response_messageIsSet = true;
}
bool __get_200_response::responseMessageIsSet() const
{
    return m_Response_messageIsSet;
}
void __get_200_response::unsetResponse_message()
{
    m_Response_messageIsSet = false;
}


} // namespace org::openapitools::server::model

