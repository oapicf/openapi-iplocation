# #iplocation.net API
#
##OpenAPI v3 specification and a set of generated API clients for iplocation.net
#
#The version of the OpenAPI document: 1.0.1-pre.0
#Contact: blah+oapicf@cliffano.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.9.0
#

require "uri"

module OpenAPIClient
  class DefaultApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get geolocation of an IP address
    # Retrieve geolocation of an IP address. 
    # @param ip [String] An IPv4 or IPv6 address that you would like to lookup.
    # @return [Get200Response]
    def root_get(ip : String, format : String?, delimiter : String?)
      data, _status_code, _headers = root_get_with_http_info(ip, format, delimiter)
      data
    end

    # Get geolocation of an IP address
    # Retrieve geolocation of an IP address. 
    # @param ip [String] An IPv4 or IPv6 address that you would like to lookup.
    # @return [Array<(Get200Response, Integer, Hash)>] Get200Response data, response status code and response headers
    def root_get_with_http_info(ip : String, format : String?, delimiter : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.root_get ..."}
      end
      # verify the required parameter "ip" is set
      if @api_client.config.client_side_validation && ip.nil?
        raise ArgumentError.new("Missing the required parameter 'ip' when calling DefaultApi.root_get")
      end
      # resource path
      local_var_path = "/"

      # query parameters
      query_params = Hash(String, String).new
      query_params["ip"] = ip.to_s unless ip.nil?
      query_params["format"] = format.to_s unless format.nil?
      query_params["delimiter"] = delimiter.to_s unless delimiter.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Get200Response"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.root_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#root_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Get200Response.from_json(data), status_code, headers
    end
  end
end
