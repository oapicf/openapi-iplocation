/* tslint:disable */
/* eslint-disable */
/**
 * iplocation.net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0-pre.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Get200Response,
  Get400Response,
} from '../models';
import {
    Get200ResponseFromJSON,
    Get200ResponseToJSON,
    Get400ResponseFromJSON,
    Get400ResponseToJSON,
} from '../models';

export interface RootGetRequest {
    ip: any;
    format?: any;
    delimiter?: any;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Retrieve geolocation of an IP address. 
     * Get geolocation of an IP address
     */
    async rootGetRaw(requestParameters: RootGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Get200Response>> {
        if (requestParameters.ip === null || requestParameters.ip === undefined) {
            throw new runtime.RequiredError('ip','Required parameter requestParameters.ip was null or undefined when calling rootGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.ip !== undefined) {
            queryParameters['ip'] = requestParameters.ip;
        }

        if (requestParameters.format !== undefined) {
            queryParameters['format'] = requestParameters.format;
        }

        if (requestParameters.delimiter !== undefined) {
            queryParameters['delimiter'] = requestParameters.delimiter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Get200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve geolocation of an IP address. 
     * Get geolocation of an IP address
     */
    async rootGet(requestParameters: RootGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Get200Response> {
        const response = await this.rootGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
