--  iplocation.net API
--  OpenAPI v3 specification and a set of generated API clients for iplocation.net
--
--  The version of the OpenAPI document: 1.1.1_pre.0
--  Contact: blah+oapicf@cliffano.com
--
--  NOTE: This package is auto generated by OpenAPI-Generator 7.12.0.
--  https://openapi-generator.tech
--  Do not edit the class manually.

package body .Models is
   pragma Style_Checks ("-bmrIu");

   pragma Warnings (Off, "*use clause for package*");

   use Swagger.Streams;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Get200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Ip.Is_Null then
         Into.Write_Entity ("ip", Value.Ip);
      end if;
      if not Value.Ip_Number.Is_Null then
         Into.Write_Entity ("ip_number", Value.Ip_Number);
      end if;
      if not Value.Ip_Version.Is_Null then
         Into.Write_Entity ("ip_version", Value.Ip_Version);
      end if;
      if not Value.Country_Name.Is_Null then
         Into.Write_Entity ("country_name", Value.Country_Name);
      end if;
      if not Value.Country_Code_2.Is_Null then
         Into.Write_Entity ("country_code2", Value.Country_Code_2);
      end if;
      if not Value.Isp.Is_Null then
         Into.Write_Entity ("isp", Value.Isp);
      end if;
      if not Value.Response_Code.Is_Null then
         Into.Write_Entity ("response_code", Value.Response_Code);
      end if;
      if not Value.Response_Message.Is_Null then
         Into.Write_Entity ("response_message", Value.Response_Message);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Get200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Get200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "ip", Value.Ip);
      Swagger.Streams.Deserialize (Object, "ip_number", Value.Ip_Number);
      Swagger.Streams.Deserialize (Object, "ip_version", Value.Ip_Version);
      Swagger.Streams.Deserialize (Object, "country_name", Value.Country_Name);
      Swagger.Streams.Deserialize (Object, "country_code2", Value.Country_Code_2);
      Swagger.Streams.Deserialize (Object, "isp", Value.Isp);
      Swagger.Streams.Deserialize (Object, "response_code", Value.Response_Code);
      Swagger.Streams.Deserialize (Object, "response_message", Value.Response_Message);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Get200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Get200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Get400Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Response_Code.Is_Null then
         Into.Write_Entity ("response_code", Value.Response_Code);
      end if;
      if not Value.Response_Message.Is_Null then
         Into.Write_Entity ("response_message", Value.Response_Message);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Get400Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Get400Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "response_code", Value.Response_Code);
      Swagger.Streams.Deserialize (Object, "response_message", Value.Response_Message);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Get400Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Get400Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


end .Models;
