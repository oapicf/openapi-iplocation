--  iplocation.net API
--  No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
--
--  The version of the OpenAPI document: 0.9.0_pre.0
--  Contact: blah@cliffano.com
--
--  NOTE: This package is auto generated by OpenAPI-Generator 6.3.0.
--  https://openapi-generator.tech
--  Do not edit the class manually.

pragma Warnings (Off, "*is not referenced");
with Swagger.Streams;
with Swagger.Servers.Operation;
package body .Skeletons is
   pragma Style_Checks ("-mr");
   pragma Warnings (Off, "*use clause for package*");

   use Swagger.Streams;

   package body Skeleton is


      package API_Root_Get is
         new Swagger.Servers.Operation
            (Handler => Root_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/");

      --  Get geolocation of an IP address
      procedure Root_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ip : .Models.AnyType_Type;
         Format : .Models.AnyType_Type;
         Delimiter : .Models.AnyType_Type;
         Result : .Models.Get200Response_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "ip", Ip);
         Swagger.Servers.Get_Query_Parameter (Req, "format", Format);
         Swagger.Servers.Get_Query_Parameter (Req, "delimiter", Delimiter);
         Impl.Root_Get
            (Ip,
             Format,
             Delimiter, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Root_Get;

      procedure Register (Server : in out Swagger.Servers.Application_Type'Class) is
      begin
         Swagger.Servers.Register (Server, API_Root_Get.Definition);
      end Register;

   end Skeleton;

   package body Shared_Instance is


      --  Get geolocation of an IP address
      procedure Root_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ip : .Models.AnyType_Type;
         Format : .Models.AnyType_Type;
         Delimiter : .Models.AnyType_Type;
         Result : .Models.Get200Response_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "ip", Ip);
         Swagger.Servers.Get_Query_Parameter (Req, "format", Format);
         Swagger.Servers.Get_Query_Parameter (Req, "delimiter", Delimiter);
         Server.Root_Get
            (Ip,
             Format,
             Delimiter, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Root_Get;

      package API_Root_Get is
         new Swagger.Servers.Operation
            (Handler => Root_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/");

      procedure Register (Server : in out Swagger.Servers.Application_Type'Class) is
      begin
         Swagger.Servers.Register (Server, API_Root_Get.Definition);
      end Register;

      protected body Server is
         --  Get geolocation of an IP address
         procedure Root_Get
            (Ip : in .Models.AnyType_Type;
             Format : in .Models.AnyType_Type;
             Delimiter : in .Models.AnyType_Type;
             Result : out .Models.Get200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Root_Get
               (Ip,
                Format,
                Delimiter,
                Result,
                Context);
         end Root_Get;

      end Server;

   end Shared_Instance;

end .Skeletons;
