--  iplocation.net API
--  OpenAPI v3 specification and a set of generated API clients for iplocation.net
--
--  The version of the OpenAPI document: 1.1.1_pre.0
--  Contact: blah+oapicf@cliffano.com
--
--  NOTE: This package is auto generated by OpenAPI-Generator 7.12.0.
--  https://openapi-generator.tech
--  Do not edit the class manually.

pragma Warnings (Off, "*is not referenced");
with Swagger.Streams;
with Swagger.Servers.Operation;
package body .Skeletons is
   pragma Style_Checks ("-bmrIu");
   pragma Warnings (Off, "*use clause for package*");

   use Swagger.Streams;

   Media_List_1 : aliased constant Swagger.Mime_List := (
     1 => Swagger.Mime_Json);

   package body Skeleton is


      package API_Root_Get is
         new Swagger.Servers.Operation
            (Handler => Root_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/",
             Mimes   => Media_List_1'Access);

      --  Get geolocation of an IP address
      procedure Root_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ip : Swagger.UString;
         Format : Swagger.Nullable_UString;
         Delimiter : Swagger.Nullable_UString;
         Result : .Models.Get200Response_Type;
      begin
         
         Ip := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ip"));

         Format := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "format"));

         Delimiter := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "delimiter"));

         
         Impl.Root_Get
            (Ip,
             Format,
             Delimiter, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully processed the request.");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Failed to complete the request.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Command not found.");
            return;
         end if;

      end Root_Get;

      procedure Register (Server : in out Swagger.Servers.Application_Type'Class) is
      begin
         Swagger.Servers.Register (Server, API_Root_Get.Definition);
      end Register;

   end Skeleton;

   package body Shared_Instance is


      --  Get geolocation of an IP address
      procedure Root_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ip : Swagger.UString;
         Format : Swagger.Nullable_UString;
         Delimiter : Swagger.Nullable_UString;
         Result : .Models.Get200Response_Type;
      begin
         Ip := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "ip"));
         Format := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "format"));
         Delimiter := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "delimiter"));

         
         Server.Root_Get
            (Ip,
             Format,
             Delimiter, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully processed the request.");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 400 then
            Context.Set_Description ("Failed to complete the request.");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Command not found.");
            return;
         end if;

      end Root_Get;

      package API_Root_Get is
         new Swagger.Servers.Operation
            (Handler => Root_Get,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/",
             Mimes   => Media_List_1'Access);


      procedure Register (Server : in out Swagger.Servers.Application_Type'Class) is
      begin
         Swagger.Servers.Register (Server, API_Root_Get.Definition);
      end Register;

      protected body Server is
         --  Get geolocation of an IP address
         procedure Root_Get
            (Ip : in Swagger.UString;
             Format : in Swagger.Nullable_UString;
             Delimiter : in Swagger.Nullable_UString;
             Result : out .Models.Get200Response_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Root_Get
               (Ip,
                Format,
                Delimiter,
                Result,
                Context);
         end Root_Get;

      end Server;

   end Shared_Instance;

end .Skeletons;
