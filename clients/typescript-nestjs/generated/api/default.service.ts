/**
 * iplocation.net API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0-pre.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { AxiosResponse } from 'axios';
import { Observable } from 'rxjs';
import { Get200Response } from '../model/get200Response';
import { Get400Response } from '../model/get400Response';
import { Configuration } from '../configuration';


@Injectable()
export class DefaultService {

    protected basePath = 'https://api.iplocation.net';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();

    constructor(protected httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Get geolocation of an IP address
     * Retrieve geolocation of an IP address. 
     * @param ip An IPv4 or IPv6 address that you would like to lookup.
     * @param format Output format, the following formats are supported: plain xml json jsonp php csv serialized
     * @param delimiter Delimiter between proxies. Can be used only with format plain. The following types are supported: 1 for \&quot;\\n\&quot;, 2 for \&quot;&lt;br&gt;\&quot;.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public rootGet(ip: any, format?: any, delimiter?: any, ): Observable<AxiosResponse<Get200Response>>;
    public rootGet(ip: any, format?: any, delimiter?: any, ): Observable<any> {

        if (ip === null || ip === undefined) {
            throw new Error('Required parameter ip was null or undefined when calling rootGet.');
        }



        let queryParameters = new URLSearchParams();
        if (ip !== undefined && ip !== null) {
            queryParameters.append('ip', <any>ip);
        }
        if (format !== undefined && format !== null) {
            queryParameters.append('format', <any>format);
        }
        if (delimiter !== undefined && delimiter !== null) {
            queryParameters.append('delimiter', <any>delimiter);
        }

        let headers = {...this.defaultHeaders};

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<Get200Response>(`${this.basePath}/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
}
