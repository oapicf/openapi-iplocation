# coding: utf-8

"""
    iplocation.net API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.9.0-pre.0
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class Get200Response(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ip': 'object',
        'ip_number': 'object',
        'ip_version': 'object',
        'country_name': 'object',
        'country_code2': 'object',
        'isp': 'object',
        'response_code': 'object',
        'response_message': 'object'
    }

    attribute_map = {
        'ip': 'ip',
        'ip_number': 'ip_number',
        'ip_version': 'ip_version',
        'country_name': 'country_name',
        'country_code2': 'country_code2',
        'isp': 'isp',
        'response_code': 'response_code',
        'response_message': 'response_message'
    }

    def __init__(self, ip=None, ip_number=None, ip_version=None, country_name=None, country_code2=None, isp=None, response_code=None, response_message=None, local_vars_configuration=None):  # noqa: E501
        """Get200Response - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._ip = None
        self._ip_number = None
        self._ip_version = None
        self._country_name = None
        self._country_code2 = None
        self._isp = None
        self._response_code = None
        self._response_message = None
        self.discriminator = None

        self.ip = ip
        self.ip_number = ip_number
        self.ip_version = ip_version
        self.country_name = country_name
        self.country_code2 = country_code2
        self.isp = isp
        self.response_code = response_code
        self.response_message = response_message

    @property
    def ip(self):
        """Gets the ip of this Get200Response.  # noqa: E501

        IPv4 or IPv6 address used to lookup geolocation.  # noqa: E501

        :return: The ip of this Get200Response.  # noqa: E501
        :rtype: object
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this Get200Response.

        IPv4 or IPv6 address used to lookup geolocation.  # noqa: E501

        :param ip: The ip of this Get200Response.  # noqa: E501
        :type ip: object
        """

        self._ip = ip

    @property
    def ip_number(self):
        """Gets the ip_number of this Get200Response.  # noqa: E501

        IP number in long integer.  # noqa: E501

        :return: The ip_number of this Get200Response.  # noqa: E501
        :rtype: object
        """
        return self._ip_number

    @ip_number.setter
    def ip_number(self, ip_number):
        """Sets the ip_number of this Get200Response.

        IP number in long integer.  # noqa: E501

        :param ip_number: The ip_number of this Get200Response.  # noqa: E501
        :type ip_number: object
        """

        self._ip_number = ip_number

    @property
    def ip_version(self):
        """Gets the ip_version of this Get200Response.  # noqa: E501

        IP version either 4 or 6.  # noqa: E501

        :return: The ip_version of this Get200Response.  # noqa: E501
        :rtype: object
        """
        return self._ip_version

    @ip_version.setter
    def ip_version(self, ip_version):
        """Sets the ip_version of this Get200Response.

        IP version either 4 or 6.  # noqa: E501

        :param ip_version: The ip_version of this Get200Response.  # noqa: E501
        :type ip_version: object
        """

        self._ip_version = ip_version

    @property
    def country_name(self):
        """Gets the country_name of this Get200Response.  # noqa: E501

        Full name of the IP country.  # noqa: E501

        :return: The country_name of this Get200Response.  # noqa: E501
        :rtype: object
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this Get200Response.

        Full name of the IP country.  # noqa: E501

        :param country_name: The country_name of this Get200Response.  # noqa: E501
        :type country_name: object
        """

        self._country_name = country_name

    @property
    def country_code2(self):
        """Gets the country_code2 of this Get200Response.  # noqa: E501

        ISO ALPHA-2 Country Code.  # noqa: E501

        :return: The country_code2 of this Get200Response.  # noqa: E501
        :rtype: object
        """
        return self._country_code2

    @country_code2.setter
    def country_code2(self, country_code2):
        """Sets the country_code2 of this Get200Response.

        ISO ALPHA-2 Country Code.  # noqa: E501

        :param country_code2: The country_code2 of this Get200Response.  # noqa: E501
        :type country_code2: object
        """

        self._country_code2 = country_code2

    @property
    def isp(self):
        """Gets the isp of this Get200Response.  # noqa: E501

        Internet Service Provider (ISP) who owns the IP address.  # noqa: E501

        :return: The isp of this Get200Response.  # noqa: E501
        :rtype: object
        """
        return self._isp

    @isp.setter
    def isp(self, isp):
        """Sets the isp of this Get200Response.

        Internet Service Provider (ISP) who owns the IP address.  # noqa: E501

        :param isp: The isp of this Get200Response.  # noqa: E501
        :type isp: object
        """

        self._isp = isp

    @property
    def response_code(self):
        """Gets the response_code of this Get200Response.  # noqa: E501

        Response status code to indicate success or failed completion of the API call.  # noqa: E501

        :return: The response_code of this Get200Response.  # noqa: E501
        :rtype: object
        """
        return self._response_code

    @response_code.setter
    def response_code(self, response_code):
        """Sets the response_code of this Get200Response.

        Response status code to indicate success or failed completion of the API call.  # noqa: E501

        :param response_code: The response_code of this Get200Response.  # noqa: E501
        :type response_code: object
        """

        self._response_code = response_code

    @property
    def response_message(self):
        """Gets the response_message of this Get200Response.  # noqa: E501

        Response message to indicate success or failed completion of the API call.  # noqa: E501

        :return: The response_message of this Get200Response.  # noqa: E501
        :rtype: object
        """
        return self._response_message

    @response_message.setter
    def response_message(self, response_message):
        """Sets the response_message of this Get200Response.

        Response message to indicate success or failed completion of the API call.  # noqa: E501

        :param response_message: The response_message of this Get200Response.  # noqa: E501
        :type response_message: object
        """

        self._response_message = response_message

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Get200Response):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Get200Response):
            return True

        return self.to_dict() != other.to_dict()
