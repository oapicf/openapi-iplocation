/*
 * iplocation.net API
 * OpenAPI v3 specification and a set of generated API clients for iplocation.net
 *
 * The version of the OpenAPI document: 0.9.0-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.controller;

import io.micronaut.http.annotation.*;
import io.micronaut.core.annotation.Nullable;
import io.micronaut.core.convert.format.Format;
import io.micronaut.security.annotation.Secured;
import io.micronaut.security.rules.SecurityRule;
import reactor.core.publisher.Mono;
import io.micronaut.http.HttpStatus;
import io.micronaut.http.exceptions.HttpStatusException;
import org.openapitools.model.Get200Response;
import org.openapitools.model.Get400Response;
import javax.annotation.Generated;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;

@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2024-07-10T08:33:42.949236796Z[Etc/UTC]", comments = "Generator version: 7.6.0")
@Controller
@Tag(name = "Default", description = "The Default API")
public class DefaultController {
    /**
     * Get geolocation of an IP address
     * Retrieve geolocation of an IP address. 
     *
     * @param ip An IPv4 or IPv6 address that you would like to lookup. (required)
     * @param _format Output format, the following formats are supported: plain xml json jsonp php csv serialized (optional)
     * @param delimiter Delimiter between proxies. Can be used only with format plain. The following types are supported: 1 for \&quot;\\n\&quot;, 2 for \&quot;&lt;br&gt;\&quot;. (optional)
     * @return Get200Response
     */
    @Operation(
        operationId = "rootGet",
        summary = "Get geolocation of an IP address",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully processed the request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Get200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Failed to complete the request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Get400Response.class))
            }),
            @ApiResponse(responseCode = "404", description = "Command not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Get400Response.class))
            })
        },
        parameters = {
            @Parameter(name = "ip", description = "An IPv4 or IPv6 address that you would like to lookup.", required = true),
            @Parameter(name = "_format", description = "Output format, the following formats are supported: plain xml json jsonp php csv serialized"),
            @Parameter(name = "delimiter", description = "Delimiter between proxies. Can be used only with format plain. The following types are supported: 1 for \"\\n\", 2 for \"<br>\".")
        }
    )
    @Get(uri="/")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_ANONYMOUS})
    public Mono<Get200Response> rootGet(
        @QueryValue(value="ip") @NotNull String ip, 
        @QueryValue(value="format") @Nullable String _format, 
        @QueryValue(value="delimiter") @Nullable String delimiter
    ) {
        // TODO implement rootGet();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }

}
