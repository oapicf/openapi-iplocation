/**
 * iplocation.net API
 * OpenAPI v3 specification and a set of generated API clients for iplocation.net
 *
 * The version of the OpenAPI document: 0.9.0-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Get200Response model module.
 * @module model/Get200Response
 * @version 0.9.0-pre.0
 */
class Get200Response {
    /**
     * Constructs a new <code>Get200Response</code>.
     * @alias module:model/Get200Response
     */
    constructor() { 
        
        Get200Response.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Get200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Get200Response} obj Optional instance to populate.
     * @return {module:model/Get200Response} The populated <code>Get200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Get200Response();

            if (data.hasOwnProperty('ip')) {
                obj['ip'] = ApiClient.convertToType(data['ip'], 'String');
            }
            if (data.hasOwnProperty('ip_number')) {
                obj['ip_number'] = ApiClient.convertToType(data['ip_number'], 'String');
            }
            if (data.hasOwnProperty('ip_version')) {
                obj['ip_version'] = ApiClient.convertToType(data['ip_version'], 'Number');
            }
            if (data.hasOwnProperty('country_name')) {
                obj['country_name'] = ApiClient.convertToType(data['country_name'], 'String');
            }
            if (data.hasOwnProperty('country_code2')) {
                obj['country_code2'] = ApiClient.convertToType(data['country_code2'], 'String');
            }
            if (data.hasOwnProperty('isp')) {
                obj['isp'] = ApiClient.convertToType(data['isp'], 'String');
            }
            if (data.hasOwnProperty('response_code')) {
                obj['response_code'] = ApiClient.convertToType(data['response_code'], 'String');
            }
            if (data.hasOwnProperty('response_message')) {
                obj['response_message'] = ApiClient.convertToType(data['response_message'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Get200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Get200Response</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ip'] && !(typeof data['ip'] === 'string' || data['ip'] instanceof String)) {
            throw new Error("Expected the field `ip` to be a primitive type in the JSON string but got " + data['ip']);
        }
        // ensure the json data is a string
        if (data['ip_number'] && !(typeof data['ip_number'] === 'string' || data['ip_number'] instanceof String)) {
            throw new Error("Expected the field `ip_number` to be a primitive type in the JSON string but got " + data['ip_number']);
        }
        // ensure the json data is a string
        if (data['country_name'] && !(typeof data['country_name'] === 'string' || data['country_name'] instanceof String)) {
            throw new Error("Expected the field `country_name` to be a primitive type in the JSON string but got " + data['country_name']);
        }
        // ensure the json data is a string
        if (data['country_code2'] && !(typeof data['country_code2'] === 'string' || data['country_code2'] instanceof String)) {
            throw new Error("Expected the field `country_code2` to be a primitive type in the JSON string but got " + data['country_code2']);
        }
        // ensure the json data is a string
        if (data['isp'] && !(typeof data['isp'] === 'string' || data['isp'] instanceof String)) {
            throw new Error("Expected the field `isp` to be a primitive type in the JSON string but got " + data['isp']);
        }
        // ensure the json data is a string
        if (data['response_code'] && !(typeof data['response_code'] === 'string' || data['response_code'] instanceof String)) {
            throw new Error("Expected the field `response_code` to be a primitive type in the JSON string but got " + data['response_code']);
        }
        // ensure the json data is a string
        if (data['response_message'] && !(typeof data['response_message'] === 'string' || data['response_message'] instanceof String)) {
            throw new Error("Expected the field `response_message` to be a primitive type in the JSON string but got " + data['response_message']);
        }

        return true;
    }


}



/**
 * IPv4 or IPv6 address used to lookup geolocation.
 * @member {String} ip
 */
Get200Response.prototype['ip'] = undefined;

/**
 * IP number in long integer (represented as string).
 * @member {String} ip_number
 */
Get200Response.prototype['ip_number'] = undefined;

/**
 * IP version either 4 or 6.
 * @member {Number} ip_version
 */
Get200Response.prototype['ip_version'] = undefined;

/**
 * Full name of the IP country.
 * @member {String} country_name
 */
Get200Response.prototype['country_name'] = undefined;

/**
 * ISO ALPHA-2 Country Code.
 * @member {String} country_code2
 */
Get200Response.prototype['country_code2'] = undefined;

/**
 * Internet Service Provider (ISP) who owns the IP address.
 * @member {String} isp
 */
Get200Response.prototype['isp'] = undefined;

/**
 * Response status code to indicate success or failed completion of the API call.
 * @member {String} response_code
 */
Get200Response.prototype['response_code'] = undefined;

/**
 * Response message to indicate success or failed completion of the API call.
 * @member {String} response_message
 */
Get200Response.prototype['response_message'] = undefined;






export default Get200Response;

