/**
 * iplocation.net API
 * OpenAPI v3 specification and a set of generated API clients for iplocation.net
 *
 * The version of the OpenAPI document: 1.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Get200Response from '../model/Get200Response';
import Get400Response from '../model/Get400Response';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.1-pre.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the rootGet operation.
     * @callback module:api/DefaultApi~rootGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get geolocation of an IP address
     * Retrieve geolocation of an IP address. 
     * @param {String} ip An IPv4 or IPv6 address that you would like to lookup.
     * @param {Object} opts Optional parameters
     * @param {String} [format] Output format, the following formats are supported: plain xml json jsonp php csv serialized
     * @param {String} [delimiter] Delimiter between proxies. Can be used only with format plain. The following types are supported: 1 for \"\\n\", 2 for \"<br>\".
     * @param {module:api/DefaultApi~rootGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get200Response}
     */
    rootGet(ip, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ip' is set
      if (ip === undefined || ip === null) {
        throw new Error("Missing the required parameter 'ip' when calling rootGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'ip': ip,
        'format': opts['format'],
        'delimiter': opts['delimiter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Get200Response;
      return this.apiClient.callApi(
        '/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
