/*
 * iplocation.net API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0-pre.0
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Get200Response
    /// </summary>
    [DataContract(Name = "__get_200_response")]
    public partial class Get200Response : IEquatable<Get200Response>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Get200Response" /> class.
        /// </summary>
        /// <param name="ip">IPv4 or IPv6 address used to lookup geolocation..</param>
        /// <param name="ipNumber">IP number in long integer..</param>
        /// <param name="ipVersion">IP version either 4 or 6..</param>
        /// <param name="countryName">Full name of the IP country..</param>
        /// <param name="countryCode2">ISO ALPHA-2 Country Code..</param>
        /// <param name="isp">Internet Service Provider (ISP) who owns the IP address..</param>
        /// <param name="responseCode">Response status code to indicate success or failed completion of the API call..</param>
        /// <param name="responseMessage">Response message to indicate success or failed completion of the API call..</param>
        public Get200Response(Object ip = default(Object), Object ipNumber = default(Object), Object ipVersion = default(Object), Object countryName = default(Object), Object countryCode2 = default(Object), Object isp = default(Object), Object responseCode = default(Object), Object responseMessage = default(Object))
        {
            this.Ip = ip;
            this.IpNumber = ipNumber;
            this.IpVersion = ipVersion;
            this.CountryName = countryName;
            this.CountryCode2 = countryCode2;
            this.Isp = isp;
            this.ResponseCode = responseCode;
            this.ResponseMessage = responseMessage;
        }

        /// <summary>
        /// IPv4 or IPv6 address used to lookup geolocation.
        /// </summary>
        /// <value>IPv4 or IPv6 address used to lookup geolocation.</value>
        [DataMember(Name = "ip", EmitDefaultValue = true)]
        public Object Ip { get; set; }

        /// <summary>
        /// IP number in long integer.
        /// </summary>
        /// <value>IP number in long integer.</value>
        [DataMember(Name = "ip_number", EmitDefaultValue = true)]
        public Object IpNumber { get; set; }

        /// <summary>
        /// IP version either 4 or 6.
        /// </summary>
        /// <value>IP version either 4 or 6.</value>
        [DataMember(Name = "ip_version", EmitDefaultValue = true)]
        public Object IpVersion { get; set; }

        /// <summary>
        /// Full name of the IP country.
        /// </summary>
        /// <value>Full name of the IP country.</value>
        [DataMember(Name = "country_name", EmitDefaultValue = true)]
        public Object CountryName { get; set; }

        /// <summary>
        /// ISO ALPHA-2 Country Code.
        /// </summary>
        /// <value>ISO ALPHA-2 Country Code.</value>
        [DataMember(Name = "country_code2", EmitDefaultValue = true)]
        public Object CountryCode2 { get; set; }

        /// <summary>
        /// Internet Service Provider (ISP) who owns the IP address.
        /// </summary>
        /// <value>Internet Service Provider (ISP) who owns the IP address.</value>
        [DataMember(Name = "isp", EmitDefaultValue = true)]
        public Object Isp { get; set; }

        /// <summary>
        /// Response status code to indicate success or failed completion of the API call.
        /// </summary>
        /// <value>Response status code to indicate success or failed completion of the API call.</value>
        [DataMember(Name = "response_code", EmitDefaultValue = true)]
        public Object ResponseCode { get; set; }

        /// <summary>
        /// Response message to indicate success or failed completion of the API call.
        /// </summary>
        /// <value>Response message to indicate success or failed completion of the API call.</value>
        [DataMember(Name = "response_message", EmitDefaultValue = true)]
        public Object ResponseMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Get200Response {\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("  IpNumber: ").Append(IpNumber).Append("\n");
            sb.Append("  IpVersion: ").Append(IpVersion).Append("\n");
            sb.Append("  CountryName: ").Append(CountryName).Append("\n");
            sb.Append("  CountryCode2: ").Append(CountryCode2).Append("\n");
            sb.Append("  Isp: ").Append(Isp).Append("\n");
            sb.Append("  ResponseCode: ").Append(ResponseCode).Append("\n");
            sb.Append("  ResponseMessage: ").Append(ResponseMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Get200Response);
        }

        /// <summary>
        /// Returns true if Get200Response instances are equal
        /// </summary>
        /// <param name="input">Instance of Get200Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Get200Response input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Ip == input.Ip ||
                    (this.Ip != null &&
                    this.Ip.Equals(input.Ip))
                ) && 
                (
                    this.IpNumber == input.IpNumber ||
                    (this.IpNumber != null &&
                    this.IpNumber.Equals(input.IpNumber))
                ) && 
                (
                    this.IpVersion == input.IpVersion ||
                    (this.IpVersion != null &&
                    this.IpVersion.Equals(input.IpVersion))
                ) && 
                (
                    this.CountryName == input.CountryName ||
                    (this.CountryName != null &&
                    this.CountryName.Equals(input.CountryName))
                ) && 
                (
                    this.CountryCode2 == input.CountryCode2 ||
                    (this.CountryCode2 != null &&
                    this.CountryCode2.Equals(input.CountryCode2))
                ) && 
                (
                    this.Isp == input.Isp ||
                    (this.Isp != null &&
                    this.Isp.Equals(input.Isp))
                ) && 
                (
                    this.ResponseCode == input.ResponseCode ||
                    (this.ResponseCode != null &&
                    this.ResponseCode.Equals(input.ResponseCode))
                ) && 
                (
                    this.ResponseMessage == input.ResponseMessage ||
                    (this.ResponseMessage != null &&
                    this.ResponseMessage.Equals(input.ResponseMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ip != null)
                {
                    hashCode = (hashCode * 59) + this.Ip.GetHashCode();
                }
                if (this.IpNumber != null)
                {
                    hashCode = (hashCode * 59) + this.IpNumber.GetHashCode();
                }
                if (this.IpVersion != null)
                {
                    hashCode = (hashCode * 59) + this.IpVersion.GetHashCode();
                }
                if (this.CountryName != null)
                {
                    hashCode = (hashCode * 59) + this.CountryName.GetHashCode();
                }
                if (this.CountryCode2 != null)
                {
                    hashCode = (hashCode * 59) + this.CountryCode2.GetHashCode();
                }
                if (this.Isp != null)
                {
                    hashCode = (hashCode * 59) + this.Isp.GetHashCode();
                }
                if (this.ResponseCode != null)
                {
                    hashCode = (hashCode * 59) + this.ResponseCode.GetHashCode();
                }
                if (this.ResponseMessage != null)
                {
                    hashCode = (hashCode * 59) + this.ResponseMessage.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
