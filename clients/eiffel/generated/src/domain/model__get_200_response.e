note
 description:"[
		iplocation.net API
 		OpenAPI v3 specification and a set of generated API clients for iplocation.net
  		The version of the OpenAPI document: 0.9.0-pre.0
 	    Contact: blah+oapicf@cliffano.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class MODEL__GET_200_RESPONSE




feature --Access

    ip: detachable STRING_32
      -- IPv4 or IPv6 address used to lookup geolocation.
    ip_number: detachable STRING_32
      -- IP number in long integer (represented as string).
    ip_version: INTEGER_32
      -- IP version either 4 or 6.
    country_name: detachable STRING_32
      -- Full name of the IP country.
    country_code2: detachable STRING_32
      -- ISO ALPHA-2 Country Code.
    isp: detachable STRING_32
      -- Internet Service Provider (ISP) who owns the IP address.
    response_code: detachable STRING_32
      -- Response status code to indicate success or failed completion of the API call.
    response_message: detachable STRING_32
      -- Response message to indicate success or failed completion of the API call.

feature -- Change Element

    set_ip (a_name: like ip)
        -- Set 'ip' with 'a_name'.
      do
        ip := a_name
      ensure
        ip_set: ip = a_name
      end

    set_ip_number (a_name: like ip_number)
        -- Set 'ip_number' with 'a_name'.
      do
        ip_number := a_name
      ensure
        ip_number_set: ip_number = a_name
      end

    set_ip_version (a_name: like ip_version)
        -- Set 'ip_version' with 'a_name'.
      do
        ip_version := a_name
      ensure
        ip_version_set: ip_version = a_name
      end

    set_country_name (a_name: like country_name)
        -- Set 'country_name' with 'a_name'.
      do
        country_name := a_name
      ensure
        country_name_set: country_name = a_name
      end

    set_country_code2 (a_name: like country_code2)
        -- Set 'country_code2' with 'a_name'.
      do
        country_code2 := a_name
      ensure
        country_code2_set: country_code2 = a_name
      end

    set_isp (a_name: like isp)
        -- Set 'isp' with 'a_name'.
      do
        isp := a_name
      ensure
        isp_set: isp = a_name
      end

    set_response_code (a_name: like response_code)
        -- Set 'response_code' with 'a_name'.
      do
        response_code := a_name
      ensure
        response_code_set: response_code = a_name
      end

    set_response_message (a_name: like response_message)
        -- Set 'response_message' with 'a_name'.
      do
        response_message := a_name
      ensure
        response_message_set: response_message = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass MODEL__GET_200_RESPONSE%N")
        if attached ip as l_ip then
          Result.append ("%Nip:")
          Result.append (l_ip.out)
          Result.append ("%N")
        end
        if attached ip_number as l_ip_number then
          Result.append ("%Nip_number:")
          Result.append (l_ip_number.out)
          Result.append ("%N")
        end
        if attached ip_version as l_ip_version then
          Result.append ("%Nip_version:")
          Result.append (l_ip_version.out)
          Result.append ("%N")
        end
        if attached country_name as l_country_name then
          Result.append ("%Ncountry_name:")
          Result.append (l_country_name.out)
          Result.append ("%N")
        end
        if attached country_code2 as l_country_code2 then
          Result.append ("%Ncountry_code2:")
          Result.append (l_country_code2.out)
          Result.append ("%N")
        end
        if attached isp as l_isp then
          Result.append ("%Nisp:")
          Result.append (l_isp.out)
          Result.append ("%N")
        end
        if attached response_code as l_response_code then
          Result.append ("%Nresponse_code:")
          Result.append (l_response_code.out)
          Result.append ("%N")
        end
        if attached response_message as l_response_message then
          Result.append ("%Nresponse_message:")
          Result.append (l_response_message.out)
          Result.append ("%N")
        end
      end
end

